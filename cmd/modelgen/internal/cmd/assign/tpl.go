package cmdassign

import (
	"io"

	"github.com/13k/night-stalker/cmd/modelgen/internal/common"
	g "github.com/13k/night-stalker/cmd/modelgen/internal/parser"
)

const (
	srcAssign = `
// Code generated by modelgen. DO NOT EDIT.

package {{.Package}}

{{ if .Imports }}
import (
	{{ range $path, $alias := .Imports }}
	{{ if $alias }}{{$alias}} {{ end }}"{{$path}}"
	{{ end }}
)
{{ end }}
{{ $recv := .Recv }}
// {{.MethodAssign}} assigns fields from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func ({{$recv}} *{{.Model}}) {{.MethodAssign}}(other *{{.Model}}) (dirty bool) {
	if other == nil {
		return false
	}

	{{ range .Fields }}
	if {{.NotEqual $recv "other"}} {
		{{.Assign $recv "other"}}
		dirty = true
	}
	{{end}}
	return
}

// {{.MethodAssignPartial}} assigns fields with non-zero values from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func ({{$recv}} *{{.Model}}) {{.MethodAssignPartial}}(other *{{.Model}}) (dirty bool) {
	if other == nil {
		return false
	}

	{{ range .Fields }}
	if {{.NotZero "other"}} && {{.NotEqual $recv "other"}} {
		{{.Assign $recv "other"}}
		dirty = true
	}
	{{end}}
	return
}
`
)

var (
	tplAssign = common.CreateTemplate("assign", srcAssign)
)

func execTplAssign(w io.Writer, p *g.Package, state *genState, s *g.Struct, recv string, fields []*field) error {
	return common.ExecTemplate(w, tplAssign, map[string]interface{}{
		"Package":             p.Name,
		"Imports":             state.imports,
		"MethodAssign":        common.RecordMethodAssign,
		"MethodAssignPartial": common.RecordMethodAssignPartial,
		"Model":               s.Name,
		"Recv":                recv,
		"Fields":              fields,
	})
}
