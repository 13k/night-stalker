// Code generated by protoc-gen-go. DO NOT EDIT.
// source: match.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Match struct {
	MatchId              uint64               `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	LobbyId              uint64               `protobuf:"varint,2,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	LobbyType            LobbyType            `protobuf:"varint,3,opt,name=lobby_type,json=lobbyType,proto3,enum=protocol.LobbyType" json:"lobby_type,omitempty"`
	LeagueId             uint64               `protobuf:"varint,4,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	SeriesId             uint64               `protobuf:"varint,5,opt,name=series_id,json=seriesId,proto3" json:"series_id,omitempty"`
	GameMode             GameMode             `protobuf:"varint,6,opt,name=game_mode,json=gameMode,proto3,enum=protocol.GameMode" json:"game_mode,omitempty"`
	AverageMmr           uint32               `protobuf:"varint,7,opt,name=average_mmr,json=averageMmr,proto3" json:"average_mmr,omitempty"`
	RadiantTeamId        uint64               `protobuf:"varint,8,opt,name=radiant_team_id,json=radiantTeamId,proto3" json:"radiant_team_id,omitempty"`
	RadiantTeamName      string               `protobuf:"bytes,9,opt,name=radiant_team_name,json=radiantTeamName,proto3" json:"radiant_team_name,omitempty"`
	RadiantTeamTag       string               `protobuf:"bytes,10,opt,name=radiant_team_tag,json=radiantTeamTag,proto3" json:"radiant_team_tag,omitempty"`
	RadiantTeamLogo      uint64               `protobuf:"varint,11,opt,name=radiant_team_logo,json=radiantTeamLogo,proto3" json:"radiant_team_logo,omitempty"`
	RadiantTeamLogoUrl   string               `protobuf:"bytes,12,opt,name=radiant_team_logo_url,json=radiantTeamLogoUrl,proto3" json:"radiant_team_logo_url,omitempty"`
	DireTeamId           uint64               `protobuf:"varint,13,opt,name=dire_team_id,json=direTeamId,proto3" json:"dire_team_id,omitempty"`
	DireTeamName         string               `protobuf:"bytes,14,opt,name=dire_team_name,json=direTeamName,proto3" json:"dire_team_name,omitempty"`
	DireTeamTag          string               `protobuf:"bytes,15,opt,name=dire_team_tag,json=direTeamTag,proto3" json:"dire_team_tag,omitempty"`
	DireTeamLogo         uint64               `protobuf:"varint,16,opt,name=dire_team_logo,json=direTeamLogo,proto3" json:"dire_team_logo,omitempty"`
	DireTeamLogoUrl      string               `protobuf:"bytes,17,opt,name=dire_team_logo_url,json=direTeamLogoUrl,proto3" json:"dire_team_logo_url,omitempty"`
	ActivateTime         *timestamp.Timestamp `protobuf:"bytes,18,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`
	DeactivateTime       *timestamp.Timestamp `protobuf:"bytes,19,opt,name=deactivate_time,json=deactivateTime,proto3" json:"deactivate_time,omitempty"`
	LastUpdateTime       *timestamp.Timestamp `protobuf:"bytes,20,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,21,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	SeriesType           uint32               `protobuf:"varint,22,opt,name=series_type,json=seriesType,proto3" json:"series_type,omitempty"`
	SeriesGame           uint32               `protobuf:"varint,23,opt,name=series_game,json=seriesGame,proto3" json:"series_game,omitempty"`
	Duration             uint32               `protobuf:"varint,24,opt,name=duration,proto3" json:"duration,omitempty"`
	RadiantScore         uint32               `protobuf:"varint,25,opt,name=radiant_score,json=radiantScore,proto3" json:"radiant_score,omitempty"`
	DireScore            uint32               `protobuf:"varint,26,opt,name=dire_score,json=direScore,proto3" json:"dire_score,omitempty"`
	Outcome              MatchOutcome         `protobuf:"varint,27,opt,name=outcome,proto3,enum=protocol.MatchOutcome" json:"outcome,omitempty"`
	Players              []*Match_Player      `protobuf:"bytes,100,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a39bbc00e119b00, []int{0}
}

func (m *Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Match.Unmarshal(m, b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Match.Marshal(b, m, deterministic)
}
func (m *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(m, src)
}
func (m *Match) XXX_Size() int {
	return xxx_messageInfo_Match.Size(m)
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *Match) GetLobbyId() uint64 {
	if m != nil {
		return m.LobbyId
	}
	return 0
}

func (m *Match) GetLobbyType() LobbyType {
	if m != nil {
		return m.LobbyType
	}
	return LobbyType_LOBBY_TYPE_CASUAL_MATCH
}

func (m *Match) GetLeagueId() uint64 {
	if m != nil {
		return m.LeagueId
	}
	return 0
}

func (m *Match) GetSeriesId() uint64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *Match) GetGameMode() GameMode {
	if m != nil {
		return m.GameMode
	}
	return GameMode_GAME_MODE_NONE
}

func (m *Match) GetAverageMmr() uint32 {
	if m != nil {
		return m.AverageMmr
	}
	return 0
}

func (m *Match) GetRadiantTeamId() uint64 {
	if m != nil {
		return m.RadiantTeamId
	}
	return 0
}

func (m *Match) GetRadiantTeamName() string {
	if m != nil {
		return m.RadiantTeamName
	}
	return ""
}

func (m *Match) GetRadiantTeamTag() string {
	if m != nil {
		return m.RadiantTeamTag
	}
	return ""
}

func (m *Match) GetRadiantTeamLogo() uint64 {
	if m != nil {
		return m.RadiantTeamLogo
	}
	return 0
}

func (m *Match) GetRadiantTeamLogoUrl() string {
	if m != nil {
		return m.RadiantTeamLogoUrl
	}
	return ""
}

func (m *Match) GetDireTeamId() uint64 {
	if m != nil {
		return m.DireTeamId
	}
	return 0
}

func (m *Match) GetDireTeamName() string {
	if m != nil {
		return m.DireTeamName
	}
	return ""
}

func (m *Match) GetDireTeamTag() string {
	if m != nil {
		return m.DireTeamTag
	}
	return ""
}

func (m *Match) GetDireTeamLogo() uint64 {
	if m != nil {
		return m.DireTeamLogo
	}
	return 0
}

func (m *Match) GetDireTeamLogoUrl() string {
	if m != nil {
		return m.DireTeamLogoUrl
	}
	return ""
}

func (m *Match) GetActivateTime() *timestamp.Timestamp {
	if m != nil {
		return m.ActivateTime
	}
	return nil
}

func (m *Match) GetDeactivateTime() *timestamp.Timestamp {
	if m != nil {
		return m.DeactivateTime
	}
	return nil
}

func (m *Match) GetLastUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

func (m *Match) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Match) GetSeriesType() uint32 {
	if m != nil {
		return m.SeriesType
	}
	return 0
}

func (m *Match) GetSeriesGame() uint32 {
	if m != nil {
		return m.SeriesGame
	}
	return 0
}

func (m *Match) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Match) GetRadiantScore() uint32 {
	if m != nil {
		return m.RadiantScore
	}
	return 0
}

func (m *Match) GetDireScore() uint32 {
	if m != nil {
		return m.DireScore
	}
	return 0
}

func (m *Match) GetOutcome() MatchOutcome {
	if m != nil {
		return m.Outcome
	}
	return MatchOutcome_MATCH_OUTCOME_UNKNOWN
}

func (m *Match) GetPlayers() []*Match_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type Match_Player struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	HeroId               uint64   `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	PlayerSlot           uint32   `protobuf:"varint,3,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	ProName              string   `protobuf:"bytes,4,opt,name=pro_name,json=proName,proto3" json:"pro_name,omitempty"`
	Kills                uint32   `protobuf:"varint,5,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths               uint32   `protobuf:"varint,6,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists              uint32   `protobuf:"varint,7,opt,name=assists,proto3" json:"assists,omitempty"`
	Items                []int64  `protobuf:"varint,8,rep,packed,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Match_Player) Reset()         { *m = Match_Player{} }
func (m *Match_Player) String() string { return proto.CompactTextString(m) }
func (*Match_Player) ProtoMessage()    {}
func (*Match_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a39bbc00e119b00, []int{0, 0}
}

func (m *Match_Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Match_Player.Unmarshal(m, b)
}
func (m *Match_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Match_Player.Marshal(b, m, deterministic)
}
func (m *Match_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match_Player.Merge(m, src)
}
func (m *Match_Player) XXX_Size() int {
	return xxx_messageInfo_Match_Player.Size(m)
}
func (m *Match_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Match_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Match_Player proto.InternalMessageInfo

func (m *Match_Player) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Match_Player) GetHeroId() uint64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *Match_Player) GetPlayerSlot() uint32 {
	if m != nil {
		return m.PlayerSlot
	}
	return 0
}

func (m *Match_Player) GetProName() string {
	if m != nil {
		return m.ProName
	}
	return ""
}

func (m *Match_Player) GetKills() uint32 {
	if m != nil {
		return m.Kills
	}
	return 0
}

func (m *Match_Player) GetDeaths() uint32 {
	if m != nil {
		return m.Deaths
	}
	return 0
}

func (m *Match_Player) GetAssists() uint32 {
	if m != nil {
		return m.Assists
	}
	return 0
}

func (m *Match_Player) GetItems() []int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Match)(nil), "protocol.Match")
	proto.RegisterType((*Match_Player)(nil), "protocol.Match.Player")
}

func init() { proto.RegisterFile("match.proto", fileDescriptor_4a39bbc00e119b00) }

var fileDescriptor_4a39bbc00e119b00 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0x85, 0xeb, 0xc4, 0xb6, 0x46, 0x96, 0x9d, 0x30, 0x5f, 0x8c, 0x83, 0x22, 0x42, 0x5a, 0x14,
	0x42, 0x0b, 0x38, 0x6d, 0x7a, 0xea, 0xa9, 0x87, 0x5d, 0x60, 0x61, 0x20, 0xd9, 0x5d, 0x28, 0xce,
	0x59, 0xa0, 0x4d, 0xae, 0x22, 0xac, 0x68, 0x0a, 0x24, 0x15, 0xc0, 0xe7, 0xfd, 0x97, 0xfb, 0x6b,
	0x16, 0x1c, 0x4a, 0xfe, 0xd8, 0x1c, 0x72, 0xb2, 0xe7, 0xbd, 0x37, 0x6f, 0x38, 0xc2, 0xcc, 0x40,
	0x28, 0x99, 0x5d, 0x3e, 0x4f, 0x2b, 0xad, 0xac, 0x22, 0x03, 0xfc, 0x59, 0xaa, 0x72, 0x72, 0x9d,
	0x2b, 0x95, 0x97, 0xe2, 0x16, 0x81, 0x45, 0xfd, 0xe5, 0xd6, 0x16, 0x52, 0x18, 0xcb, 0x64, 0xe5,
	0xa5, 0x93, 0x50, 0xac, 0x6a, 0x69, 0x7c, 0x70, 0xf3, 0x2d, 0x84, 0xc3, 0x07, 0xe7, 0x43, 0x2e,
	0x61, 0x80, 0x86, 0x59, 0xc1, 0x69, 0x27, 0xee, 0x24, 0x07, 0x69, 0x1f, 0xe3, 0x19, 0x77, 0x54,
	0xa9, 0x16, 0x8b, 0xb5, 0xa3, 0x7e, 0xf1, 0x14, 0xc6, 0x33, 0x4e, 0xee, 0x00, 0x3c, 0x65, 0xd7,
	0x95, 0xa0, 0xdd, 0xb8, 0x93, 0x8c, 0xee, 0x4e, 0xa6, 0xed, 0x63, 0xa6, 0xf7, 0x8e, 0x9b, 0xaf,
	0x2b, 0x91, 0x06, 0x65, 0xfb, 0x97, 0x5c, 0x41, 0x50, 0x0a, 0x96, 0xd7, 0xc2, 0xf9, 0x1d, 0xa0,
	0xdf, 0xc0, 0x03, 0x33, 0xee, 0x48, 0x23, 0x74, 0x21, 0x8c, 0x23, 0x0f, 0x3d, 0xe9, 0x81, 0x19,
	0x27, 0xb7, 0x10, 0xe4, 0x4c, 0x8a, 0x4c, 0x2a, 0x2e, 0x68, 0x0f, 0x8b, 0x91, 0x6d, 0xb1, 0x0f,
	0x4c, 0x8a, 0x07, 0xc5, 0x45, 0x3a, 0xc8, 0x9b, 0x7f, 0xe4, 0x1a, 0x42, 0xf6, 0x22, 0x34, 0xcb,
	0x45, 0x26, 0xa5, 0xa6, 0xfd, 0xb8, 0x93, 0x44, 0x29, 0x34, 0xd0, 0x83, 0xd4, 0xe4, 0x0f, 0x18,
	0x6b, 0xc6, 0x0b, 0xb6, 0xb2, 0x99, 0x15, 0x4c, 0xba, 0xa2, 0x03, 0x2c, 0x1a, 0x35, 0xf0, 0x5c,
	0x30, 0x39, 0xe3, 0xe4, 0x4f, 0x38, 0xde, 0xd3, 0xad, 0x98, 0x14, 0x34, 0x88, 0x3b, 0x49, 0x90,
	0x8e, 0x77, 0x94, 0x1f, 0x99, 0x14, 0x24, 0x81, 0xa3, 0x3d, 0xad, 0x65, 0x39, 0x05, 0x94, 0x8e,
	0x76, 0xa4, 0x73, 0x96, 0xbf, 0x72, 0x2d, 0x55, 0xae, 0x68, 0x88, 0xf5, 0x77, 0x5d, 0xef, 0x55,
	0xae, 0xc8, 0x3f, 0x70, 0xf6, 0x4a, 0x9b, 0xd5, 0xba, 0xa4, 0x43, 0xb4, 0x26, 0x3f, 0xe9, 0x9f,
	0x74, 0x49, 0x62, 0x18, 0xf2, 0x42, 0x8b, 0x4d, 0x67, 0x11, 0x3a, 0x83, 0xc3, 0x9a, 0xb6, 0x7e,
	0x87, 0xd1, 0x56, 0x81, 0x3d, 0x8d, 0xd0, 0x6d, 0xd8, 0x6a, 0xb0, 0xa1, 0x1b, 0x88, 0xb6, 0x2a,
	0xd7, 0xcd, 0x18, 0x45, 0x61, 0x2b, 0x72, 0xad, 0xec, 0x39, 0x61, 0x1f, 0x47, 0x58, 0x6d, 0xe3,
	0x84, 0x4d, 0xfc, 0x05, 0x64, 0x5f, 0x85, 0x1d, 0x1c, 0xfb, 0xef, 0xb8, 0xab, 0x74, 0xcf, 0xff,
	0x1f, 0x22, 0xb6, 0xb4, 0xc5, 0x0b, 0xb3, 0x22, 0x73, 0x43, 0x4c, 0x49, 0xdc, 0x49, 0xc2, 0xbb,
	0xc9, 0xd4, 0x4f, 0xf8, 0xb4, 0x9d, 0xf0, 0xe9, 0xbc, 0x9d, 0xf0, 0x74, 0xd8, 0x26, 0x38, 0x88,
	0xbc, 0x83, 0x31, 0x17, 0xfb, 0x16, 0x27, 0x6f, 0x5a, 0x8c, 0xb6, 0x29, 0x68, 0xf2, 0x1e, 0x8e,
	0x4a, 0x66, 0x6c, 0x56, 0x57, 0x7c, 0xe3, 0x72, 0xfa, 0xb6, 0x8b, 0xcb, 0x79, 0xc2, 0x14, 0x74,
	0xf9, 0x0f, 0xc0, 0x58, 0xa6, 0xad, 0xcf, 0x3f, 0x7b, 0x33, 0x3f, 0x40, 0x35, 0xa6, 0x5e, 0x43,
	0xd8, 0x6c, 0x04, 0xee, 0xd8, 0xb9, 0x9f, 0x61, 0x0f, 0xe1, 0x3e, 0x6d, 0x05, 0x6e, 0xee, 0xe9,
	0xc5, 0xae, 0xc0, 0xed, 0x04, 0x99, 0xc0, 0x80, 0xd7, 0x9a, 0xd9, 0x42, 0xad, 0x28, 0x45, 0x76,
	0x13, 0x93, 0xdf, 0xa0, 0x9d, 0xf4, 0xcc, 0x2c, 0x95, 0x16, 0xf4, 0x12, 0x05, 0xc3, 0x06, 0x7c,
	0x74, 0x18, 0xf9, 0x15, 0x70, 0x68, 0x1a, 0xc5, 0x04, 0x15, 0x81, 0x43, 0x3c, 0xfd, 0x37, 0xf4,
	0x55, 0x6d, 0x97, 0x4a, 0x0a, 0x7a, 0x85, 0x4b, 0x79, 0xbe, 0x5d, 0x4a, 0x3c, 0x2e, 0x9f, 0x3c,
	0x9b, 0xb6, 0x32, 0x97, 0x51, 0x95, 0x6c, 0x2d, 0xb4, 0xa1, 0x3c, 0xee, 0x26, 0xe1, 0xab, 0x8c,
	0xe9, 0x67, 0xa4, 0xd3, 0x56, 0x36, 0xf9, 0xde, 0x81, 0x9e, 0xc7, 0xdc, 0x6b, 0xd8, 0x72, 0xa9,
	0xea, 0x95, 0x6d, 0x6f, 0x55, 0x94, 0x06, 0x0d, 0x32, 0xe3, 0xe4, 0x02, 0xfa, 0xcf, 0x42, 0xab,
	0xed, 0xb1, 0xea, 0xb9, 0x70, 0xc6, 0xdd, 0x77, 0xf2, 0x6e, 0x99, 0x29, 0x95, 0xc5, 0x63, 0x15,
	0xa5, 0xe0, 0xa1, 0xc7, 0x52, 0x59, 0x77, 0xe7, 0x2a, 0xad, 0xfc, 0x1e, 0x1c, 0xe0, 0x4c, 0xf6,
	0x2b, 0xad, 0x70, 0x05, 0x4e, 0xe1, 0xf0, 0x6b, 0x51, 0x96, 0x06, 0x4f, 0x52, 0x94, 0xfa, 0x80,
	0x9c, 0x43, 0x8f, 0x0b, 0x66, 0x9f, 0x0d, 0x1e, 0xa3, 0x28, 0x6d, 0x22, 0x42, 0xa1, 0xcf, 0x8c,
	0x29, 0x8c, 0x35, 0xcd, 0xc9, 0x69, 0x43, 0xe7, 0x53, 0x58, 0x21, 0x0d, 0x1d, 0xc4, 0xdd, 0xa4,
	0x9b, 0xfa, 0x60, 0xd1, 0xc3, 0xe6, 0xff, 0xfd, 0x11, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x54, 0x2f,
	0xdf, 0xd3, 0x05, 0x00, 0x00,
}
