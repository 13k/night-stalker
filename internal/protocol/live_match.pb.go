// Code generated by protoc-gen-go. DO NOT EDIT.
// source: live_match.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LiveMatch struct {
	MatchId                    uint64               `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	ServerSteamId              uint64               `protobuf:"varint,2,opt,name=server_steam_id,json=serverSteamId,proto3" json:"server_steam_id,omitempty"`
	LobbyId                    uint64               `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	LobbyType                  LobbyType            `protobuf:"varint,4,opt,name=lobby_type,json=lobbyType,proto3,enum=protocol.LobbyType" json:"lobby_type,omitempty"`
	LeagueId                   uint64               `protobuf:"varint,5,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	SeriesId                   uint64               `protobuf:"varint,6,opt,name=series_id,json=seriesId,proto3" json:"series_id,omitempty"`
	GameMode                   GameMode             `protobuf:"varint,7,opt,name=game_mode,json=gameMode,proto3,enum=protocol.GameMode" json:"game_mode,omitempty"`
	GameState                  GameState            `protobuf:"varint,8,opt,name=game_state,json=gameState,proto3,enum=protocol.GameState" json:"game_state,omitempty"`
	GameTimestamp              uint32               `protobuf:"varint,9,opt,name=game_timestamp,json=gameTimestamp,proto3" json:"game_timestamp,omitempty"`
	GameTime                   int32                `protobuf:"varint,10,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	AverageMmr                 uint32               `protobuf:"varint,11,opt,name=average_mmr,json=averageMmr,proto3" json:"average_mmr,omitempty"`
	Delay                      uint32               `protobuf:"varint,12,opt,name=delay,proto3" json:"delay,omitempty"`
	Spectators                 uint32               `protobuf:"varint,13,opt,name=spectators,proto3" json:"spectators,omitempty"`
	SortScore                  float64              `protobuf:"fixed64,14,opt,name=sort_score,json=sortScore,proto3" json:"sort_score,omitempty"`
	RadiantLead                int32                `protobuf:"varint,15,opt,name=radiant_lead,json=radiantLead,proto3" json:"radiant_lead,omitempty"`
	RadiantScore               uint32               `protobuf:"varint,16,opt,name=radiant_score,json=radiantScore,proto3" json:"radiant_score,omitempty"`
	RadiantTeamId              uint64               `protobuf:"varint,17,opt,name=radiant_team_id,json=radiantTeamId,proto3" json:"radiant_team_id,omitempty"`
	RadiantTeamName            string               `protobuf:"bytes,18,opt,name=radiant_team_name,json=radiantTeamName,proto3" json:"radiant_team_name,omitempty"`
	RadiantTeamTag             string               `protobuf:"bytes,19,opt,name=radiant_team_tag,json=radiantTeamTag,proto3" json:"radiant_team_tag,omitempty"`
	RadiantTeamLogo            uint64               `protobuf:"varint,20,opt,name=radiant_team_logo,json=radiantTeamLogo,proto3" json:"radiant_team_logo,omitempty"`
	RadiantTeamLogoUrl         string               `protobuf:"bytes,21,opt,name=radiant_team_logo_url,json=radiantTeamLogoUrl,proto3" json:"radiant_team_logo_url,omitempty"`
	RadiantNetWorth            uint32               `protobuf:"varint,22,opt,name=radiant_net_worth,json=radiantNetWorth,proto3" json:"radiant_net_worth,omitempty"`
	DireScore                  uint32               `protobuf:"varint,23,opt,name=dire_score,json=direScore,proto3" json:"dire_score,omitempty"`
	DireTeamId                 uint64               `protobuf:"varint,24,opt,name=dire_team_id,json=direTeamId,proto3" json:"dire_team_id,omitempty"`
	DireTeamName               string               `protobuf:"bytes,25,opt,name=dire_team_name,json=direTeamName,proto3" json:"dire_team_name,omitempty"`
	DireTeamTag                string               `protobuf:"bytes,26,opt,name=dire_team_tag,json=direTeamTag,proto3" json:"dire_team_tag,omitempty"`
	DireTeamLogo               uint64               `protobuf:"varint,27,opt,name=dire_team_logo,json=direTeamLogo,proto3" json:"dire_team_logo,omitempty"`
	DireTeamLogoUrl            string               `protobuf:"bytes,28,opt,name=dire_team_logo_url,json=direTeamLogoUrl,proto3" json:"dire_team_logo_url,omitempty"`
	DireNetWorth               uint32               `protobuf:"varint,29,opt,name=dire_net_worth,json=direNetWorth,proto3" json:"dire_net_worth,omitempty"`
	BuildingState              uint32               `protobuf:"varint,30,opt,name=building_state,json=buildingState,proto3" json:"building_state,omitempty"`
	WeekendTourneyTournamentId uint32               `protobuf:"varint,31,opt,name=weekend_tourney_tournament_id,json=weekendTourneyTournamentId,proto3" json:"weekend_tourney_tournament_id,omitempty"`
	WeekendTourneyDivision     uint32               `protobuf:"varint,32,opt,name=weekend_tourney_division,json=weekendTourneyDivision,proto3" json:"weekend_tourney_division,omitempty"`
	WeekendTourneySkillLevel   uint32               `protobuf:"varint,33,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel,proto3" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound uint32               `protobuf:"varint,34,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound,proto3" json:"weekend_tourney_bracket_round,omitempty"`
	ActivateTime               *timestamp.Timestamp `protobuf:"bytes,35,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`
	DeactivateTime             *timestamp.Timestamp `protobuf:"bytes,36,opt,name=deactivate_time,json=deactivateTime,proto3" json:"deactivate_time,omitempty"`
	LastUpdateTime             *timestamp.Timestamp `protobuf:"bytes,37,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	Players                    []*LiveMatch_Player  `protobuf:"bytes,100,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}             `json:"-"`
	XXX_unrecognized           []byte               `json:"-"`
	XXX_sizecache              int32                `json:"-"`
}

func (m *LiveMatch) Reset()         { *m = LiveMatch{} }
func (m *LiveMatch) String() string { return proto.CompactTextString(m) }
func (*LiveMatch) ProtoMessage()    {}
func (*LiveMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d0b6910c4ef4a19, []int{0}
}

func (m *LiveMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveMatch.Unmarshal(m, b)
}
func (m *LiveMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveMatch.Marshal(b, m, deterministic)
}
func (m *LiveMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveMatch.Merge(m, src)
}
func (m *LiveMatch) XXX_Size() int {
	return xxx_messageInfo_LiveMatch.Size(m)
}
func (m *LiveMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveMatch.DiscardUnknown(m)
}

var xxx_messageInfo_LiveMatch proto.InternalMessageInfo

func (m *LiveMatch) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *LiveMatch) GetServerSteamId() uint64 {
	if m != nil {
		return m.ServerSteamId
	}
	return 0
}

func (m *LiveMatch) GetLobbyId() uint64 {
	if m != nil {
		return m.LobbyId
	}
	return 0
}

func (m *LiveMatch) GetLobbyType() LobbyType {
	if m != nil {
		return m.LobbyType
	}
	return LobbyType_LOBBY_TYPE_CASUAL_MATCH
}

func (m *LiveMatch) GetLeagueId() uint64 {
	if m != nil {
		return m.LeagueId
	}
	return 0
}

func (m *LiveMatch) GetSeriesId() uint64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *LiveMatch) GetGameMode() GameMode {
	if m != nil {
		return m.GameMode
	}
	return GameMode_GAME_MODE_NONE
}

func (m *LiveMatch) GetGameState() GameState {
	if m != nil {
		return m.GameState
	}
	return GameState_GAME_STATE_INIT
}

func (m *LiveMatch) GetGameTimestamp() uint32 {
	if m != nil {
		return m.GameTimestamp
	}
	return 0
}

func (m *LiveMatch) GetGameTime() int32 {
	if m != nil {
		return m.GameTime
	}
	return 0
}

func (m *LiveMatch) GetAverageMmr() uint32 {
	if m != nil {
		return m.AverageMmr
	}
	return 0
}

func (m *LiveMatch) GetDelay() uint32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *LiveMatch) GetSpectators() uint32 {
	if m != nil {
		return m.Spectators
	}
	return 0
}

func (m *LiveMatch) GetSortScore() float64 {
	if m != nil {
		return m.SortScore
	}
	return 0
}

func (m *LiveMatch) GetRadiantLead() int32 {
	if m != nil {
		return m.RadiantLead
	}
	return 0
}

func (m *LiveMatch) GetRadiantScore() uint32 {
	if m != nil {
		return m.RadiantScore
	}
	return 0
}

func (m *LiveMatch) GetRadiantTeamId() uint64 {
	if m != nil {
		return m.RadiantTeamId
	}
	return 0
}

func (m *LiveMatch) GetRadiantTeamName() string {
	if m != nil {
		return m.RadiantTeamName
	}
	return ""
}

func (m *LiveMatch) GetRadiantTeamTag() string {
	if m != nil {
		return m.RadiantTeamTag
	}
	return ""
}

func (m *LiveMatch) GetRadiantTeamLogo() uint64 {
	if m != nil {
		return m.RadiantTeamLogo
	}
	return 0
}

func (m *LiveMatch) GetRadiantTeamLogoUrl() string {
	if m != nil {
		return m.RadiantTeamLogoUrl
	}
	return ""
}

func (m *LiveMatch) GetRadiantNetWorth() uint32 {
	if m != nil {
		return m.RadiantNetWorth
	}
	return 0
}

func (m *LiveMatch) GetDireScore() uint32 {
	if m != nil {
		return m.DireScore
	}
	return 0
}

func (m *LiveMatch) GetDireTeamId() uint64 {
	if m != nil {
		return m.DireTeamId
	}
	return 0
}

func (m *LiveMatch) GetDireTeamName() string {
	if m != nil {
		return m.DireTeamName
	}
	return ""
}

func (m *LiveMatch) GetDireTeamTag() string {
	if m != nil {
		return m.DireTeamTag
	}
	return ""
}

func (m *LiveMatch) GetDireTeamLogo() uint64 {
	if m != nil {
		return m.DireTeamLogo
	}
	return 0
}

func (m *LiveMatch) GetDireTeamLogoUrl() string {
	if m != nil {
		return m.DireTeamLogoUrl
	}
	return ""
}

func (m *LiveMatch) GetDireNetWorth() uint32 {
	if m != nil {
		return m.DireNetWorth
	}
	return 0
}

func (m *LiveMatch) GetBuildingState() uint32 {
	if m != nil {
		return m.BuildingState
	}
	return 0
}

func (m *LiveMatch) GetWeekendTourneyTournamentId() uint32 {
	if m != nil {
		return m.WeekendTourneyTournamentId
	}
	return 0
}

func (m *LiveMatch) GetWeekendTourneyDivision() uint32 {
	if m != nil {
		return m.WeekendTourneyDivision
	}
	return 0
}

func (m *LiveMatch) GetWeekendTourneySkillLevel() uint32 {
	if m != nil {
		return m.WeekendTourneySkillLevel
	}
	return 0
}

func (m *LiveMatch) GetWeekendTourneyBracketRound() uint32 {
	if m != nil {
		return m.WeekendTourneyBracketRound
	}
	return 0
}

func (m *LiveMatch) GetActivateTime() *timestamp.Timestamp {
	if m != nil {
		return m.ActivateTime
	}
	return nil
}

func (m *LiveMatch) GetDeactivateTime() *timestamp.Timestamp {
	if m != nil {
		return m.DeactivateTime
	}
	return nil
}

func (m *LiveMatch) GetLastUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

func (m *LiveMatch) GetPlayers() []*LiveMatch_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type LiveMatch_Player struct {
	AccountId            uint32   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PersonaName          string   `protobuf:"bytes,3,opt,name=persona_name,json=personaName,proto3" json:"persona_name,omitempty"`
	AvatarUrl            string   `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	AvatarMediumUrl      string   `protobuf:"bytes,5,opt,name=avatar_medium_url,json=avatarMediumUrl,proto3" json:"avatar_medium_url,omitempty"`
	AvatarFullUrl        string   `protobuf:"bytes,6,opt,name=avatar_full_url,json=avatarFullUrl,proto3" json:"avatar_full_url,omitempty"`
	IsPro                bool     `protobuf:"varint,7,opt,name=is_pro,json=isPro,proto3" json:"is_pro,omitempty"`
	HeroId               uint64   `protobuf:"varint,8,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	PlayerSlot           uint32   `protobuf:"varint,9,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	Team                 GameTeam `protobuf:"varint,10,opt,name=team,proto3,enum=protocol.GameTeam" json:"team,omitempty"`
	Level                uint32   `protobuf:"varint,11,opt,name=level,proto3" json:"level,omitempty"`
	Kills                uint32   `protobuf:"varint,12,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths               uint32   `protobuf:"varint,13,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists              uint32   `protobuf:"varint,14,opt,name=assists,proto3" json:"assists,omitempty"`
	Denies               uint32   `protobuf:"varint,15,opt,name=denies,proto3" json:"denies,omitempty"`
	LastHits             uint32   `protobuf:"varint,16,opt,name=last_hits,json=lastHits,proto3" json:"last_hits,omitempty"`
	Gold                 uint32   `protobuf:"varint,17,opt,name=gold,proto3" json:"gold,omitempty"`
	NetWorth             uint32   `protobuf:"varint,18,opt,name=net_worth,json=netWorth,proto3" json:"net_worth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveMatch_Player) Reset()         { *m = LiveMatch_Player{} }
func (m *LiveMatch_Player) String() string { return proto.CompactTextString(m) }
func (*LiveMatch_Player) ProtoMessage()    {}
func (*LiveMatch_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d0b6910c4ef4a19, []int{0, 0}
}

func (m *LiveMatch_Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveMatch_Player.Unmarshal(m, b)
}
func (m *LiveMatch_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveMatch_Player.Marshal(b, m, deterministic)
}
func (m *LiveMatch_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveMatch_Player.Merge(m, src)
}
func (m *LiveMatch_Player) XXX_Size() int {
	return xxx_messageInfo_LiveMatch_Player.Size(m)
}
func (m *LiveMatch_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveMatch_Player.DiscardUnknown(m)
}

var xxx_messageInfo_LiveMatch_Player proto.InternalMessageInfo

func (m *LiveMatch_Player) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *LiveMatch_Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LiveMatch_Player) GetPersonaName() string {
	if m != nil {
		return m.PersonaName
	}
	return ""
}

func (m *LiveMatch_Player) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *LiveMatch_Player) GetAvatarMediumUrl() string {
	if m != nil {
		return m.AvatarMediumUrl
	}
	return ""
}

func (m *LiveMatch_Player) GetAvatarFullUrl() string {
	if m != nil {
		return m.AvatarFullUrl
	}
	return ""
}

func (m *LiveMatch_Player) GetIsPro() bool {
	if m != nil {
		return m.IsPro
	}
	return false
}

func (m *LiveMatch_Player) GetHeroId() uint64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *LiveMatch_Player) GetPlayerSlot() uint32 {
	if m != nil {
		return m.PlayerSlot
	}
	return 0
}

func (m *LiveMatch_Player) GetTeam() GameTeam {
	if m != nil {
		return m.Team
	}
	return GameTeam_GAME_TEAM_UNKNOWN
}

func (m *LiveMatch_Player) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LiveMatch_Player) GetKills() uint32 {
	if m != nil {
		return m.Kills
	}
	return 0
}

func (m *LiveMatch_Player) GetDeaths() uint32 {
	if m != nil {
		return m.Deaths
	}
	return 0
}

func (m *LiveMatch_Player) GetAssists() uint32 {
	if m != nil {
		return m.Assists
	}
	return 0
}

func (m *LiveMatch_Player) GetDenies() uint32 {
	if m != nil {
		return m.Denies
	}
	return 0
}

func (m *LiveMatch_Player) GetLastHits() uint32 {
	if m != nil {
		return m.LastHits
	}
	return 0
}

func (m *LiveMatch_Player) GetGold() uint32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *LiveMatch_Player) GetNetWorth() uint32 {
	if m != nil {
		return m.NetWorth
	}
	return 0
}

func init() {
	proto.RegisterType((*LiveMatch)(nil), "protocol.LiveMatch")
	proto.RegisterType((*LiveMatch_Player)(nil), "protocol.LiveMatch.Player")
}

func init() { proto.RegisterFile("live_match.proto", fileDescriptor_6d0b6910c4ef4a19) }

var fileDescriptor_6d0b6910c4ef4a19 = []byte{
	// 1042 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0x41, 0x6f, 0x1b, 0x37,
	0x13, 0x85, 0x62, 0x59, 0x96, 0x28, 0x4b, 0xb6, 0x99, 0xd8, 0x61, 0xe4, 0xcf, 0xf1, 0xc6, 0x89,
	0x0d, 0xe1, 0x2b, 0x20, 0xa3, 0x6e, 0x0f, 0xbd, 0x14, 0x45, 0xdb, 0xa0, 0xad, 0x00, 0x3b, 0x08,
	0xd6, 0x0a, 0x7a, 0x5c, 0x50, 0xe2, 0x64, 0xbd, 0x30, 0x77, 0x29, 0x90, 0x5c, 0x05, 0xba, 0xf7,
	0xdc, 0xdf, 0x5c, 0xcc, 0x70, 0x57, 0xb2, 0xec, 0x00, 0x39, 0x89, 0x7c, 0xf3, 0xde, 0x23, 0x35,
	0xcb, 0x99, 0x61, 0xfb, 0x3a, 0x5b, 0x40, 0x92, 0x4b, 0x3f, 0xbb, 0x1b, 0xcd, 0xad, 0xf1, 0x86,
	0xb7, 0xe9, 0x67, 0x66, 0xf4, 0xe0, 0x34, 0x35, 0x26, 0xd5, 0x70, 0x49, 0xc0, 0xb4, 0xfc, 0x7c,
	0xe9, 0xb3, 0x1c, 0x9c, 0x97, 0xf9, 0x3c, 0x50, 0x07, 0x5d, 0x28, 0xca, 0xdc, 0x85, 0xcd, 0xd9,
	0x3f, 0x07, 0xac, 0x73, 0x9d, 0x2d, 0xe0, 0x06, 0xbd, 0xf8, 0x2b, 0xd6, 0x26, 0xd3, 0x24, 0x53,
	0xa2, 0x11, 0x35, 0x86, 0xcd, 0x78, 0x87, 0xf6, 0x63, 0xc5, 0x2f, 0xd8, 0x9e, 0x03, 0xbb, 0x00,
	0x9b, 0x38, 0x0f, 0x32, 0x47, 0xc6, 0x33, 0x62, 0xf4, 0x02, 0x7c, 0x8b, 0xe8, 0x58, 0xa1, 0x85,
	0x36, 0xd3, 0xe9, 0x12, 0x09, 0x5b, 0xc1, 0x82, 0xf6, 0x63, 0xc5, 0xaf, 0x18, 0x0b, 0x21, 0xbf,
	0x9c, 0x83, 0x68, 0x46, 0x8d, 0x61, 0xff, 0xea, 0xf9, 0xa8, 0xbe, 0xf8, 0xe8, 0x1a, 0x63, 0x93,
	0xe5, 0x1c, 0xe2, 0x8e, 0xae, 0x97, 0xfc, 0x98, 0x75, 0x34, 0xc8, 0xb4, 0x04, 0xf4, 0xdb, 0x26,
	0xbf, 0x76, 0x00, 0xc6, 0x0a, 0x83, 0x0e, 0x6c, 0x06, 0x0e, 0x83, 0xad, 0x10, 0x0c, 0xc0, 0x58,
	0xf1, 0x4b, 0xd6, 0x49, 0x65, 0x0e, 0x49, 0x6e, 0x14, 0x88, 0x1d, 0x3a, 0x8c, 0xaf, 0x0f, 0xfb,
	0x53, 0xe6, 0x70, 0x63, 0x14, 0xc4, 0xed, 0xb4, 0x5a, 0xe1, 0xf5, 0x48, 0xe0, 0xbc, 0xf4, 0x20,
	0xda, 0x8f, 0xaf, 0x87, 0x8a, 0x5b, 0x0c, 0xc5, 0xe4, 0x4b, 0x4b, 0x7e, 0xce, 0xfa, 0xa4, 0x59,
	0xe5, 0x58, 0x74, 0xa2, 0xc6, 0xb0, 0x17, 0xf7, 0x10, 0x9d, 0xd4, 0x20, 0x5e, 0x74, 0x45, 0x13,
	0x2c, 0x6a, 0x0c, 0xb7, 0xc3, 0xb9, 0xc8, 0xe0, 0xa7, 0xac, 0x2b, 0x17, 0x60, 0x65, 0x0a, 0x49,
	0x9e, 0x5b, 0xd1, 0x25, 0x03, 0x56, 0x41, 0x37, 0xb9, 0xe5, 0x2f, 0xd8, 0xb6, 0x02, 0x2d, 0x97,
	0x62, 0x97, 0x42, 0x61, 0xc3, 0x5f, 0x33, 0xe6, 0xe6, 0x30, 0xf3, 0xd2, 0x1b, 0xeb, 0x44, 0x2f,
	0xa8, 0xd6, 0x08, 0x3f, 0x61, 0xcc, 0x19, 0xeb, 0x13, 0x37, 0x33, 0x16, 0x44, 0x3f, 0x6a, 0x0c,
	0x1b, 0x71, 0x07, 0x91, 0x5b, 0x04, 0xf8, 0x1b, 0xb6, 0x6b, 0xa5, 0xca, 0x64, 0xe1, 0x13, 0x0d,
	0x52, 0x89, 0x3d, 0xba, 0x55, 0xb7, 0xc2, 0xae, 0x41, 0x2a, 0xfe, 0x96, 0xf5, 0x6a, 0x4a, 0x30,
	0xd9, 0xa7, 0x43, 0x6a, 0x5d, 0xf0, 0xb9, 0x60, 0x7b, 0x35, 0xa9, 0x7e, 0x17, 0x07, 0xe1, 0x5d,
	0x54, 0xf0, 0x24, 0xbc, 0x8b, 0xff, 0xb3, 0x83, 0x0d, 0x5e, 0x21, 0x73, 0x10, 0x3c, 0x6a, 0x0c,
	0x3b, 0xf1, 0xde, 0x03, 0xe6, 0x07, 0x99, 0x03, 0x1f, 0xb2, 0xfd, 0x0d, 0xae, 0x97, 0xa9, 0x78,
	0x4e, 0xd4, 0xfe, 0x03, 0xea, 0x44, 0xa6, 0x4f, 0x5c, 0xb5, 0x49, 0x8d, 0x78, 0x41, 0xe7, 0x3f,
	0x74, 0xbd, 0x36, 0xa9, 0xe1, 0xdf, 0xb3, 0xc3, 0x27, 0xdc, 0xa4, 0xb4, 0x5a, 0x1c, 0x92, 0x35,
	0x7f, 0xc4, 0xff, 0x64, 0xf5, 0x43, 0xfb, 0x02, 0x7c, 0xf2, 0xc5, 0x58, 0x7f, 0x27, 0x8e, 0x28,
	0x0b, 0xb5, 0xfd, 0x07, 0xf0, 0x7f, 0x23, 0x8c, 0xf9, 0x56, 0x99, 0x85, 0x2a, 0x55, 0x2f, 0x89,
	0xd4, 0x41, 0x24, 0xe4, 0x29, 0x62, 0xbb, 0x14, 0xae, 0x93, 0x24, 0xe8, 0x92, 0x24, 0xa9, 0x32,
	0xf4, 0x8e, 0xf5, 0xd7, 0x0c, 0x4a, 0xcf, 0x2b, 0xba, 0xd8, 0x6e, 0xcd, 0xa1, 0xdc, 0x9c, 0xb1,
	0xde, 0x9a, 0x85, 0x89, 0x19, 0x10, 0xa9, 0x5b, 0x93, 0x30, 0x2b, 0x1b, 0x4e, 0x94, 0x92, 0x63,
	0x3a, 0x6d, 0xe5, 0x44, 0xf9, 0xf8, 0x8e, 0xf1, 0x4d, 0x16, 0x25, 0xe3, 0x7f, 0xe1, 0x93, 0x3c,
	0x64, 0x62, 0x26, 0x6a, 0xcb, 0x75, 0x1a, 0x4e, 0xc2, 0x63, 0x40, 0x74, 0x95, 0x83, 0x73, 0xd6,
	0x9f, 0x96, 0x99, 0x56, 0x59, 0x91, 0x56, 0x65, 0xf4, 0x3a, 0x94, 0x43, 0x8d, 0x86, 0xaa, 0xf9,
	0x95, 0x9d, 0x7c, 0x01, 0xb8, 0x87, 0x42, 0x25, 0xde, 0x94, 0xb6, 0x80, 0x65, 0xf8, 0x95, 0x39,
	0x14, 0x1e, 0x93, 0x73, 0x4a, 0xaa, 0x41, 0x45, 0x9a, 0x04, 0xce, 0x64, 0x45, 0x19, 0x2b, 0xfe,
	0x13, 0x13, 0x8f, 0x2d, 0x54, 0xb6, 0xc8, 0x5c, 0x66, 0x0a, 0x11, 0x91, 0xfa, 0x68, 0x53, 0xfd,
	0xbe, 0x8a, 0xf2, 0x9f, 0xd9, 0xf1, 0x63, 0xa5, 0xbb, 0xcf, 0xb4, 0x4e, 0x34, 0x2c, 0x40, 0x8b,
	0x37, 0x24, 0x16, 0x9b, 0xe2, 0x5b, 0x24, 0x5c, 0x63, 0xfc, 0x6b, 0x77, 0x9f, 0x5a, 0x39, 0xbb,
	0x07, 0x9f, 0x58, 0x53, 0x16, 0x4a, 0x9c, 0x7d, 0xed, 0xee, 0xbf, 0x05, 0x4a, 0x8c, 0x0c, 0xfe,
	0x0b, 0xeb, 0xc9, 0x99, 0xcf, 0x16, 0xd2, 0x57, 0x1d, 0xe1, 0x6d, 0xd4, 0x18, 0x76, 0xaf, 0x06,
	0xa3, 0xd0, 0xb9, 0x47, 0x75, 0xe7, 0x1e, 0xad, 0x1a, 0x48, 0xbc, 0x5b, 0x0b, 0xa8, 0x63, 0xfc,
	0xce, 0xf6, 0x14, 0x6c, 0x5a, 0xbc, 0xfb, 0xa6, 0x45, 0x7f, 0x2d, 0x21, 0x93, 0xf7, 0x6c, 0x5f,
	0x4b, 0xe7, 0x93, 0x72, 0xae, 0x56, 0x2e, 0xe7, 0xdf, 0x76, 0x41, 0xcd, 0x27, 0x92, 0x90, 0xcb,
	0x8f, 0x6c, 0x67, 0xae, 0xe5, 0x12, 0xac, 0x13, 0x2a, 0xda, 0x22, 0xf1, 0xba, 0xa1, 0xd7, 0x73,
	0x65, 0xf4, 0x91, 0x28, 0x71, 0x4d, 0x1d, 0xfc, 0xdb, 0x64, 0xad, 0x80, 0x61, 0xd9, 0xc8, 0xd9,
	0xcc, 0x94, 0xe1, 0xc3, 0x37, 0x42, 0xd9, 0x54, 0xc8, 0x58, 0x71, 0xce, 0x9a, 0x54, 0x0a, 0xcf,
	0xe8, 0x59, 0xd2, 0x1a, 0x5b, 0xd7, 0x1c, 0xac, 0x33, 0x85, 0x0c, 0x65, 0xb2, 0x15, 0x2a, 0xa0,
	0xc2, 0xa8, 0x4a, 0xd0, 0x75, 0x21, 0xbd, 0xb4, 0xf4, 0xa6, 0x9b, 0x44, 0xe8, 0x04, 0xa4, 0xaa,
	0xeb, 0x2a, 0x9c, 0x83, 0xca, 0xca, 0x9c, 0x58, 0xdb, 0xe1, 0xe5, 0x87, 0xc0, 0x0d, 0xe1, 0xc8,
	0xbd, 0x60, 0x15, 0x94, 0x7c, 0x2e, 0xb5, 0x26, 0x66, 0x8b, 0x98, 0xbd, 0x00, 0xff, 0x51, 0x6a,
	0x8d, 0xbc, 0x43, 0xd6, 0xca, 0x5c, 0x32, 0xb7, 0x86, 0x86, 0x4d, 0x3b, 0xde, 0xce, 0xdc, 0x47,
	0x6b, 0xf8, 0x4b, 0xb6, 0x73, 0x07, 0xd6, 0xe0, 0x9f, 0x6b, 0x53, 0x11, 0xb6, 0x70, 0x3b, 0x56,
	0xd8, 0xf6, 0x43, 0x3a, 0x12, 0xa7, 0x8d, 0xaf, 0xe6, 0x06, 0x0b, 0xd0, 0xad, 0x36, 0x9e, 0x5f,
	0xb0, 0x26, 0x96, 0x26, 0xcd, 0x8b, 0x27, 0xb3, 0x0b, 0x6b, 0x33, 0xa6, 0x38, 0x8e, 0x87, 0xf0,
	0x74, 0xc3, 0xe4, 0x08, 0x1b, 0x44, 0xf1, 0xd1, 0xba, 0x7a, 0x68, 0xd0, 0x86, 0x1f, 0xb1, 0x96,
	0x02, 0xe9, 0xef, 0xea, 0x81, 0x51, 0xed, 0xb8, 0x60, 0x3b, 0xd2, 0xb9, 0xcc, 0x79, 0x47, 0x93,
	0xa2, 0x17, 0xd7, 0xdb, 0xa0, 0x28, 0x32, 0x70, 0x34, 0x21, 0x48, 0x81, 0x3b, 0x1a, 0xcc, 0xf8,
	0x7c, 0xee, 0x32, 0xef, 0xaa, 0xc1, 0xd0, 0x46, 0xe0, 0xaf, 0xcc, 0x3b, 0xfc, 0x6a, 0xa9, 0xd1,
	0x61, 0x12, 0xf4, 0x62, 0x5a, 0xa3, 0x60, 0xdd, 0x3c, 0x78, 0x10, 0x14, 0x55, 0xe3, 0x98, 0xb6,
	0xe8, 0xcf, 0xfd, 0xf0, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0xb0, 0x68, 0x66, 0xd9, 0x08,
	0x00, 0x00,
}
