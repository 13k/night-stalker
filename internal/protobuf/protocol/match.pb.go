// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.6.1
// source: protocol/match.proto

package protocol

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId            uint64               `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	LobbyId            uint64               `protobuf:"varint,2,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	LobbyType          LobbyType            `protobuf:"varint,3,opt,name=lobby_type,json=lobbyType,proto3,enum=protocol.LobbyType" json:"lobby_type,omitempty"`
	LeagueId           uint64               `protobuf:"varint,4,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	SeriesId           uint64               `protobuf:"varint,5,opt,name=series_id,json=seriesId,proto3" json:"series_id,omitempty"`
	GameMode           GameMode             `protobuf:"varint,6,opt,name=game_mode,json=gameMode,proto3,enum=protocol.GameMode" json:"game_mode,omitempty"`
	AverageMmr         uint32               `protobuf:"varint,7,opt,name=average_mmr,json=averageMmr,proto3" json:"average_mmr,omitempty"`
	RadiantTeamId      uint64               `protobuf:"varint,8,opt,name=radiant_team_id,json=radiantTeamId,proto3" json:"radiant_team_id,omitempty"`
	RadiantTeamName    string               `protobuf:"bytes,9,opt,name=radiant_team_name,json=radiantTeamName,proto3" json:"radiant_team_name,omitempty"`
	RadiantTeamTag     string               `protobuf:"bytes,10,opt,name=radiant_team_tag,json=radiantTeamTag,proto3" json:"radiant_team_tag,omitempty"`
	RadiantTeamLogo    uint64               `protobuf:"varint,11,opt,name=radiant_team_logo,json=radiantTeamLogo,proto3" json:"radiant_team_logo,omitempty"`
	RadiantTeamLogoUrl string               `protobuf:"bytes,12,opt,name=radiant_team_logo_url,json=radiantTeamLogoUrl,proto3" json:"radiant_team_logo_url,omitempty"`
	DireTeamId         uint64               `protobuf:"varint,13,opt,name=dire_team_id,json=direTeamId,proto3" json:"dire_team_id,omitempty"`
	DireTeamName       string               `protobuf:"bytes,14,opt,name=dire_team_name,json=direTeamName,proto3" json:"dire_team_name,omitempty"`
	DireTeamTag        string               `protobuf:"bytes,15,opt,name=dire_team_tag,json=direTeamTag,proto3" json:"dire_team_tag,omitempty"`
	DireTeamLogo       uint64               `protobuf:"varint,16,opt,name=dire_team_logo,json=direTeamLogo,proto3" json:"dire_team_logo,omitempty"`
	DireTeamLogoUrl    string               `protobuf:"bytes,17,opt,name=dire_team_logo_url,json=direTeamLogoUrl,proto3" json:"dire_team_logo_url,omitempty"`
	ActivateTime       *timestamp.Timestamp `protobuf:"bytes,18,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`
	DeactivateTime     *timestamp.Timestamp `protobuf:"bytes,19,opt,name=deactivate_time,json=deactivateTime,proto3" json:"deactivate_time,omitempty"`
	LastUpdateTime     *timestamp.Timestamp `protobuf:"bytes,20,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	StartTime          *timestamp.Timestamp `protobuf:"bytes,21,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	SeriesType         uint32               `protobuf:"varint,22,opt,name=series_type,json=seriesType,proto3" json:"series_type,omitempty"`
	SeriesGame         uint32               `protobuf:"varint,23,opt,name=series_game,json=seriesGame,proto3" json:"series_game,omitempty"`
	Duration           uint32               `protobuf:"varint,24,opt,name=duration,proto3" json:"duration,omitempty"`
	RadiantScore       uint32               `protobuf:"varint,25,opt,name=radiant_score,json=radiantScore,proto3" json:"radiant_score,omitempty"`
	DireScore          uint32               `protobuf:"varint,26,opt,name=dire_score,json=direScore,proto3" json:"dire_score,omitempty"`
	Outcome            MatchOutcome         `protobuf:"varint,27,opt,name=outcome,proto3,enum=protocol.MatchOutcome" json:"outcome,omitempty"`
	Players            []*Match_Player      `protobuf:"bytes,100,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_protocol_match_proto_rawDescGZIP(), []int{0}
}

func (x *Match) GetMatchId() uint64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *Match) GetLobbyId() uint64 {
	if x != nil {
		return x.LobbyId
	}
	return 0
}

func (x *Match) GetLobbyType() LobbyType {
	if x != nil {
		return x.LobbyType
	}
	return LobbyType_LOBBY_TYPE_CASUAL_MATCH
}

func (x *Match) GetLeagueId() uint64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *Match) GetSeriesId() uint64 {
	if x != nil {
		return x.SeriesId
	}
	return 0
}

func (x *Match) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_GAME_MODE_NONE
}

func (x *Match) GetAverageMmr() uint32 {
	if x != nil {
		return x.AverageMmr
	}
	return 0
}

func (x *Match) GetRadiantTeamId() uint64 {
	if x != nil {
		return x.RadiantTeamId
	}
	return 0
}

func (x *Match) GetRadiantTeamName() string {
	if x != nil {
		return x.RadiantTeamName
	}
	return ""
}

func (x *Match) GetRadiantTeamTag() string {
	if x != nil {
		return x.RadiantTeamTag
	}
	return ""
}

func (x *Match) GetRadiantTeamLogo() uint64 {
	if x != nil {
		return x.RadiantTeamLogo
	}
	return 0
}

func (x *Match) GetRadiantTeamLogoUrl() string {
	if x != nil {
		return x.RadiantTeamLogoUrl
	}
	return ""
}

func (x *Match) GetDireTeamId() uint64 {
	if x != nil {
		return x.DireTeamId
	}
	return 0
}

func (x *Match) GetDireTeamName() string {
	if x != nil {
		return x.DireTeamName
	}
	return ""
}

func (x *Match) GetDireTeamTag() string {
	if x != nil {
		return x.DireTeamTag
	}
	return ""
}

func (x *Match) GetDireTeamLogo() uint64 {
	if x != nil {
		return x.DireTeamLogo
	}
	return 0
}

func (x *Match) GetDireTeamLogoUrl() string {
	if x != nil {
		return x.DireTeamLogoUrl
	}
	return ""
}

func (x *Match) GetActivateTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActivateTime
	}
	return nil
}

func (x *Match) GetDeactivateTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeactivateTime
	}
	return nil
}

func (x *Match) GetLastUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *Match) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Match) GetSeriesType() uint32 {
	if x != nil {
		return x.SeriesType
	}
	return 0
}

func (x *Match) GetSeriesGame() uint32 {
	if x != nil {
		return x.SeriesGame
	}
	return 0
}

func (x *Match) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Match) GetRadiantScore() uint32 {
	if x != nil {
		return x.RadiantScore
	}
	return 0
}

func (x *Match) GetDireScore() uint32 {
	if x != nil {
		return x.DireScore
	}
	return 0
}

func (x *Match) GetOutcome() MatchOutcome {
	if x != nil {
		return x.Outcome
	}
	return MatchOutcome_MATCH_OUTCOME_UNKNOWN
}

func (x *Match) GetPlayers() []*Match_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type Match_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	HeroId     uint64  `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	PlayerSlot uint32  `protobuf:"varint,3,opt,name=player_slot,json=playerSlot,proto3" json:"player_slot,omitempty"`
	ProName    string  `protobuf:"bytes,4,opt,name=pro_name,json=proName,proto3" json:"pro_name,omitempty"`
	Kills      uint32  `protobuf:"varint,5,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths     uint32  `protobuf:"varint,6,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists    uint32  `protobuf:"varint,7,opt,name=assists,proto3" json:"assists,omitempty"`
	Items      []int64 `protobuf:"varint,8,rep,packed,name=items,proto3" json:"items,omitempty"`
}

func (x *Match_Player) Reset() {
	*x = Match_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match_Player) ProtoMessage() {}

func (x *Match_Player) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match_Player.ProtoReflect.Descriptor instead.
func (*Match_Player) Descriptor() ([]byte, []int) {
	return file_protocol_match_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Match_Player) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Match_Player) GetHeroId() uint64 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *Match_Player) GetPlayerSlot() uint32 {
	if x != nil {
		return x.PlayerSlot
	}
	return 0
}

func (x *Match_Player) GetProName() string {
	if x != nil {
		return x.ProName
	}
	return ""
}

func (x *Match_Player) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *Match_Player) GetDeaths() uint32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *Match_Player) GetAssists() uint32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *Match_Player) GetItems() []int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_protocol_match_proto protoreflect.FileDescriptor

var file_protocol_match_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x0b, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x6d, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x6d, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x64, 0x69,
	0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f,
	0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x64, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x64, 0x69,
	0x61, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x1a, 0xda, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_match_proto_rawDescOnce sync.Once
	file_protocol_match_proto_rawDescData = file_protocol_match_proto_rawDesc
)

func file_protocol_match_proto_rawDescGZIP() []byte {
	file_protocol_match_proto_rawDescOnce.Do(func() {
		file_protocol_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_match_proto_rawDescData)
	})
	return file_protocol_match_proto_rawDescData
}

var file_protocol_match_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protocol_match_proto_goTypes = []interface{}{
	(*Match)(nil),               // 0: protocol.Match
	(*Match_Player)(nil),        // 1: protocol.Match.Player
	(LobbyType)(0),              // 2: protocol.LobbyType
	(GameMode)(0),               // 3: protocol.GameMode
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(MatchOutcome)(0),           // 5: protocol.MatchOutcome
}
var file_protocol_match_proto_depIdxs = []int32{
	2, // 0: protocol.Match.lobby_type:type_name -> protocol.LobbyType
	3, // 1: protocol.Match.game_mode:type_name -> protocol.GameMode
	4, // 2: protocol.Match.activate_time:type_name -> google.protobuf.Timestamp
	4, // 3: protocol.Match.deactivate_time:type_name -> google.protobuf.Timestamp
	4, // 4: protocol.Match.last_update_time:type_name -> google.protobuf.Timestamp
	4, // 5: protocol.Match.start_time:type_name -> google.protobuf.Timestamp
	5, // 6: protocol.Match.outcome:type_name -> protocol.MatchOutcome
	1, // 7: protocol.Match.players:type_name -> protocol.Match.Player
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_protocol_match_proto_init() }
func file_protocol_match_proto_init() {
	if File_protocol_match_proto != nil {
		return
	}
	file_protocol_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protocol_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_match_proto_goTypes,
		DependencyIndexes: file_protocol_match_proto_depIdxs,
		MessageInfos:      file_protocol_match_proto_msgTypes,
	}.Build()
	File_protocol_match_proto = out.File
	file_protocol_match_proto_rawDesc = nil
	file_protocol_match_proto_goTypes = nil
	file_protocol_match_proto_depIdxs = nil
}
