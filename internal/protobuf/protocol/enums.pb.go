// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.6.1
// source: protocol/enums.proto

package protocol

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LobbyType int32

const (
	LobbyType_LOBBY_TYPE_CASUAL_MATCH            LobbyType = 0
	LobbyType_LOBBY_TYPE_PRACTICE                LobbyType = 1
	LobbyType_LOBBY_TYPE_COOP_BOT_MATCH          LobbyType = 4
	LobbyType_LOBBY_TYPE_LEGACY_TEAM_MATCH       LobbyType = 5
	LobbyType_LOBBY_TYPE_LEGACY_SOLO_QUEUE_MATCH LobbyType = 6
	LobbyType_LOBBY_TYPE_COMPETITIVE_MATCH       LobbyType = 7
	LobbyType_LOBBY_TYPE_CASUAL_1V1_MATCH        LobbyType = 8
	LobbyType_LOBBY_TYPE_WEEKEND_TOURNEY         LobbyType = 9
	LobbyType_LOBBY_TYPE_LOCAL_BOT_MATCH         LobbyType = 10
	LobbyType_LOBBY_TYPE_SPECTATOR               LobbyType = 11
	LobbyType_LOBBY_TYPE_EVENT_MATCH             LobbyType = 12
)

// Enum value maps for LobbyType.
var (
	LobbyType_name = map[int32]string{
		0:  "LOBBY_TYPE_CASUAL_MATCH",
		1:  "LOBBY_TYPE_PRACTICE",
		4:  "LOBBY_TYPE_COOP_BOT_MATCH",
		5:  "LOBBY_TYPE_LEGACY_TEAM_MATCH",
		6:  "LOBBY_TYPE_LEGACY_SOLO_QUEUE_MATCH",
		7:  "LOBBY_TYPE_COMPETITIVE_MATCH",
		8:  "LOBBY_TYPE_CASUAL_1V1_MATCH",
		9:  "LOBBY_TYPE_WEEKEND_TOURNEY",
		10: "LOBBY_TYPE_LOCAL_BOT_MATCH",
		11: "LOBBY_TYPE_SPECTATOR",
		12: "LOBBY_TYPE_EVENT_MATCH",
	}
	LobbyType_value = map[string]int32{
		"LOBBY_TYPE_CASUAL_MATCH":            0,
		"LOBBY_TYPE_PRACTICE":                1,
		"LOBBY_TYPE_COOP_BOT_MATCH":          4,
		"LOBBY_TYPE_LEGACY_TEAM_MATCH":       5,
		"LOBBY_TYPE_LEGACY_SOLO_QUEUE_MATCH": 6,
		"LOBBY_TYPE_COMPETITIVE_MATCH":       7,
		"LOBBY_TYPE_CASUAL_1V1_MATCH":        8,
		"LOBBY_TYPE_WEEKEND_TOURNEY":         9,
		"LOBBY_TYPE_LOCAL_BOT_MATCH":         10,
		"LOBBY_TYPE_SPECTATOR":               11,
		"LOBBY_TYPE_EVENT_MATCH":             12,
	}
)

func (x LobbyType) Enum() *LobbyType {
	p := new(LobbyType)
	*p = x
	return p
}

func (x LobbyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[0].Descriptor()
}

func (LobbyType) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[0]
}

func (x LobbyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbyType.Descriptor instead.
func (LobbyType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{0}
}

type GameMode int32

const (
	GameMode_GAME_MODE_NONE              GameMode = 0
	GameMode_GAME_MODE_AP                GameMode = 1
	GameMode_GAME_MODE_CM                GameMode = 2
	GameMode_GAME_MODE_RD                GameMode = 3
	GameMode_GAME_MODE_SD                GameMode = 4
	GameMode_GAME_MODE_AR                GameMode = 5
	GameMode_GAME_MODE_INTRO             GameMode = 6
	GameMode_GAME_MODE_HW                GameMode = 7
	GameMode_GAME_MODE_REVERSE_CM        GameMode = 8
	GameMode_GAME_MODE_XMAS              GameMode = 9
	GameMode_GAME_MODE_TUTORIAL          GameMode = 10
	GameMode_GAME_MODE_MO                GameMode = 11
	GameMode_GAME_MODE_LP                GameMode = 12
	GameMode_GAME_MODE_POOL1             GameMode = 13
	GameMode_GAME_MODE_FH                GameMode = 14
	GameMode_GAME_MODE_CUSTOM            GameMode = 15
	GameMode_GAME_MODE_CD                GameMode = 16
	GameMode_GAME_MODE_BD                GameMode = 17
	GameMode_GAME_MODE_ABILITY_DRAFT     GameMode = 18
	GameMode_GAME_MODE_EVENT             GameMode = 19
	GameMode_GAME_MODE_ARDM              GameMode = 20
	GameMode_GAME_MODE_1V1_MID           GameMode = 21
	GameMode_GAME_MODE_ALL_DRAFT         GameMode = 22
	GameMode_GAME_MODE_TURBO             GameMode = 23
	GameMode_GAME_MODE_MUTATION          GameMode = 24
	GameMode_GAME_MODE_COACHES_CHALLENGE GameMode = 25
)

// Enum value maps for GameMode.
var (
	GameMode_name = map[int32]string{
		0:  "GAME_MODE_NONE",
		1:  "GAME_MODE_AP",
		2:  "GAME_MODE_CM",
		3:  "GAME_MODE_RD",
		4:  "GAME_MODE_SD",
		5:  "GAME_MODE_AR",
		6:  "GAME_MODE_INTRO",
		7:  "GAME_MODE_HW",
		8:  "GAME_MODE_REVERSE_CM",
		9:  "GAME_MODE_XMAS",
		10: "GAME_MODE_TUTORIAL",
		11: "GAME_MODE_MO",
		12: "GAME_MODE_LP",
		13: "GAME_MODE_POOL1",
		14: "GAME_MODE_FH",
		15: "GAME_MODE_CUSTOM",
		16: "GAME_MODE_CD",
		17: "GAME_MODE_BD",
		18: "GAME_MODE_ABILITY_DRAFT",
		19: "GAME_MODE_EVENT",
		20: "GAME_MODE_ARDM",
		21: "GAME_MODE_1V1_MID",
		22: "GAME_MODE_ALL_DRAFT",
		23: "GAME_MODE_TURBO",
		24: "GAME_MODE_MUTATION",
		25: "GAME_MODE_COACHES_CHALLENGE",
	}
	GameMode_value = map[string]int32{
		"GAME_MODE_NONE":              0,
		"GAME_MODE_AP":                1,
		"GAME_MODE_CM":                2,
		"GAME_MODE_RD":                3,
		"GAME_MODE_SD":                4,
		"GAME_MODE_AR":                5,
		"GAME_MODE_INTRO":             6,
		"GAME_MODE_HW":                7,
		"GAME_MODE_REVERSE_CM":        8,
		"GAME_MODE_XMAS":              9,
		"GAME_MODE_TUTORIAL":          10,
		"GAME_MODE_MO":                11,
		"GAME_MODE_LP":                12,
		"GAME_MODE_POOL1":             13,
		"GAME_MODE_FH":                14,
		"GAME_MODE_CUSTOM":            15,
		"GAME_MODE_CD":                16,
		"GAME_MODE_BD":                17,
		"GAME_MODE_ABILITY_DRAFT":     18,
		"GAME_MODE_EVENT":             19,
		"GAME_MODE_ARDM":              20,
		"GAME_MODE_1V1_MID":           21,
		"GAME_MODE_ALL_DRAFT":         22,
		"GAME_MODE_TURBO":             23,
		"GAME_MODE_MUTATION":          24,
		"GAME_MODE_COACHES_CHALLENGE": 25,
	}
)

func (x GameMode) Enum() *GameMode {
	p := new(GameMode)
	*p = x
	return p
}

func (x GameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[1].Descriptor()
}

func (GameMode) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[1]
}

func (x GameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameMode.Descriptor instead.
func (GameMode) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{1}
}

type GameState int32

const (
	GameState_GAME_STATE_INIT                     GameState = 0
	GameState_GAME_STATE_WAIT_FOR_PLAYERS_TO_LOAD GameState = 1
	GameState_GAME_STATE_HERO_SELECTION           GameState = 2
	GameState_GAME_STATE_STRATEGY_TIME            GameState = 3
	GameState_GAME_STATE_PRE_GAME                 GameState = 4
	GameState_GAME_STATE_GAME_IN_PROGRESS         GameState = 5
	GameState_GAME_STATE_POST_GAME                GameState = 6
	GameState_GAME_STATE_DISCONNECT               GameState = 7
	GameState_GAME_STATE_TEAM_SHOWCASE            GameState = 8
	GameState_GAME_STATE_CUSTOM_GAME_SETUP        GameState = 9
	GameState_GAME_STATE_WAIT_FOR_MAP_TO_LOAD     GameState = 10
	GameState_GAME_STATE_LAST                     GameState = 11
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0:  "GAME_STATE_INIT",
		1:  "GAME_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
		2:  "GAME_STATE_HERO_SELECTION",
		3:  "GAME_STATE_STRATEGY_TIME",
		4:  "GAME_STATE_PRE_GAME",
		5:  "GAME_STATE_GAME_IN_PROGRESS",
		6:  "GAME_STATE_POST_GAME",
		7:  "GAME_STATE_DISCONNECT",
		8:  "GAME_STATE_TEAM_SHOWCASE",
		9:  "GAME_STATE_CUSTOM_GAME_SETUP",
		10: "GAME_STATE_WAIT_FOR_MAP_TO_LOAD",
		11: "GAME_STATE_LAST",
	}
	GameState_value = map[string]int32{
		"GAME_STATE_INIT":                     0,
		"GAME_STATE_WAIT_FOR_PLAYERS_TO_LOAD": 1,
		"GAME_STATE_HERO_SELECTION":           2,
		"GAME_STATE_STRATEGY_TIME":            3,
		"GAME_STATE_PRE_GAME":                 4,
		"GAME_STATE_GAME_IN_PROGRESS":         5,
		"GAME_STATE_POST_GAME":                6,
		"GAME_STATE_DISCONNECT":               7,
		"GAME_STATE_TEAM_SHOWCASE":            8,
		"GAME_STATE_CUSTOM_GAME_SETUP":        9,
		"GAME_STATE_WAIT_FOR_MAP_TO_LOAD":     10,
		"GAME_STATE_LAST":                     11,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[2].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[2]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{2}
}

type GameTeam int32

const (
	GameTeam_GAME_TEAM_UNKNOWN  GameTeam = 0
	GameTeam_GAME_TEAM_GOODGUYS GameTeam = 2
	GameTeam_GAME_TEAM_BADGUYS  GameTeam = 3
	GameTeam_GAME_TEAM_NEUTRALS GameTeam = 4
	GameTeam_GAME_TEAM_NOTEAM   GameTeam = 5
	GameTeam_GAME_TEAM_CUSTOM1  GameTeam = 6
	GameTeam_GAME_TEAM_CUSTOM2  GameTeam = 7
	GameTeam_GAME_TEAM_CUSTOM3  GameTeam = 8
	GameTeam_GAME_TEAM_CUSTOM4  GameTeam = 9
	GameTeam_GAME_TEAM_CUSTOM5  GameTeam = 10
	GameTeam_GAME_TEAM_CUSTOM6  GameTeam = 11
	GameTeam_GAME_TEAM_CUSTOM7  GameTeam = 12
	GameTeam_GAME_TEAM_CUSTOM8  GameTeam = 13
)

// Enum value maps for GameTeam.
var (
	GameTeam_name = map[int32]string{
		0:  "GAME_TEAM_UNKNOWN",
		2:  "GAME_TEAM_GOODGUYS",
		3:  "GAME_TEAM_BADGUYS",
		4:  "GAME_TEAM_NEUTRALS",
		5:  "GAME_TEAM_NOTEAM",
		6:  "GAME_TEAM_CUSTOM1",
		7:  "GAME_TEAM_CUSTOM2",
		8:  "GAME_TEAM_CUSTOM3",
		9:  "GAME_TEAM_CUSTOM4",
		10: "GAME_TEAM_CUSTOM5",
		11: "GAME_TEAM_CUSTOM6",
		12: "GAME_TEAM_CUSTOM7",
		13: "GAME_TEAM_CUSTOM8",
	}
	GameTeam_value = map[string]int32{
		"GAME_TEAM_UNKNOWN":  0,
		"GAME_TEAM_GOODGUYS": 2,
		"GAME_TEAM_BADGUYS":  3,
		"GAME_TEAM_NEUTRALS": 4,
		"GAME_TEAM_NOTEAM":   5,
		"GAME_TEAM_CUSTOM1":  6,
		"GAME_TEAM_CUSTOM2":  7,
		"GAME_TEAM_CUSTOM3":  8,
		"GAME_TEAM_CUSTOM4":  9,
		"GAME_TEAM_CUSTOM5":  10,
		"GAME_TEAM_CUSTOM6":  11,
		"GAME_TEAM_CUSTOM7":  12,
		"GAME_TEAM_CUSTOM8":  13,
	}
)

func (x GameTeam) Enum() *GameTeam {
	p := new(GameTeam)
	*p = x
	return p
}

func (x GameTeam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameTeam) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[3].Descriptor()
}

func (GameTeam) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[3]
}

func (x GameTeam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameTeam.Descriptor instead.
func (GameTeam) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{3}
}

type BuildingType int32

const (
	BuildingType_BUILDING_TYPE_TOWER    BuildingType = 0
	BuildingType_BUILDING_TYPE_BARRACKS BuildingType = 1
	BuildingType_BUILDING_TYPE_ANCIENT  BuildingType = 2
)

// Enum value maps for BuildingType.
var (
	BuildingType_name = map[int32]string{
		0: "BUILDING_TYPE_TOWER",
		1: "BUILDING_TYPE_BARRACKS",
		2: "BUILDING_TYPE_ANCIENT",
	}
	BuildingType_value = map[string]int32{
		"BUILDING_TYPE_TOWER":    0,
		"BUILDING_TYPE_BARRACKS": 1,
		"BUILDING_TYPE_ANCIENT":  2,
	}
)

func (x BuildingType) Enum() *BuildingType {
	p := new(BuildingType)
	*p = x
	return p
}

func (x BuildingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildingType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[4].Descriptor()
}

func (BuildingType) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[4]
}

func (x BuildingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildingType.Descriptor instead.
func (BuildingType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{4}
}

type FantasyRole int32

const (
	FantasyRole_FANTASY_ROLE_UNDEFINED FantasyRole = 0
	FantasyRole_FANTASY_ROLE_CORE      FantasyRole = 1
	FantasyRole_FANTASY_ROLE_SUPPORT   FantasyRole = 2
	FantasyRole_FANTASY_ROLE_OFFLANE   FantasyRole = 3
	FantasyRole_FANTASY_ROLE_MID       FantasyRole = 4
)

// Enum value maps for FantasyRole.
var (
	FantasyRole_name = map[int32]string{
		0: "FANTASY_ROLE_UNDEFINED",
		1: "FANTASY_ROLE_CORE",
		2: "FANTASY_ROLE_SUPPORT",
		3: "FANTASY_ROLE_OFFLANE",
		4: "FANTASY_ROLE_MID",
	}
	FantasyRole_value = map[string]int32{
		"FANTASY_ROLE_UNDEFINED": 0,
		"FANTASY_ROLE_CORE":      1,
		"FANTASY_ROLE_SUPPORT":   2,
		"FANTASY_ROLE_OFFLANE":   3,
		"FANTASY_ROLE_MID":       4,
	}
)

func (x FantasyRole) Enum() *FantasyRole {
	p := new(FantasyRole)
	*p = x
	return p
}

func (x FantasyRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FantasyRole) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[5].Descriptor()
}

func (FantasyRole) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[5]
}

func (x FantasyRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FantasyRole.Descriptor instead.
func (FantasyRole) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{5}
}

type LaneType int32

const (
	LaneType_LANE_TYPE_UNKNOWN LaneType = 0
	LaneType_LANE_TYPE_SAFE    LaneType = 1
	LaneType_LANE_TYPE_OFF     LaneType = 2
	LaneType_LANE_TYPE_MID     LaneType = 3
	LaneType_LANE_TYPE_JUNGLE  LaneType = 4
	LaneType_LANE_TYPE_ROAM    LaneType = 5
)

// Enum value maps for LaneType.
var (
	LaneType_name = map[int32]string{
		0: "LANE_TYPE_UNKNOWN",
		1: "LANE_TYPE_SAFE",
		2: "LANE_TYPE_OFF",
		3: "LANE_TYPE_MID",
		4: "LANE_TYPE_JUNGLE",
		5: "LANE_TYPE_ROAM",
	}
	LaneType_value = map[string]int32{
		"LANE_TYPE_UNKNOWN": 0,
		"LANE_TYPE_SAFE":    1,
		"LANE_TYPE_OFF":     2,
		"LANE_TYPE_MID":     3,
		"LANE_TYPE_JUNGLE":  4,
		"LANE_TYPE_ROAM":    5,
	}
)

func (x LaneType) Enum() *LaneType {
	p := new(LaneType)
	*p = x
	return p
}

func (x LaneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[6].Descriptor()
}

func (LaneType) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[6]
}

func (x LaneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaneType.Descriptor instead.
func (LaneType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{6}
}

type MatchOutcome int32

const (
	MatchOutcome_MATCH_OUTCOME_UNKNOWN                            MatchOutcome = 0
	MatchOutcome_MATCH_OUTCOME_RAD_VICTORY                        MatchOutcome = 2
	MatchOutcome_MATCH_OUTCOME_DIRE_VICTORY                       MatchOutcome = 3
	MatchOutcome_MATCH_OUTCOME_NOT_SCORED_POOR_NETWORK_CONDITIONS MatchOutcome = 64
	MatchOutcome_MATCH_OUTCOME_NOT_SCORED_LEAVER                  MatchOutcome = 65
	MatchOutcome_MATCH_OUTCOME_NOT_SCORED_SERVER_CRASH            MatchOutcome = 66
	MatchOutcome_MATCH_OUTCOME_NOT_SCORED_NEVER_STARTED           MatchOutcome = 67
	MatchOutcome_MATCH_OUTCOME_NOT_SCORED_CANCELED                MatchOutcome = 68
)

// Enum value maps for MatchOutcome.
var (
	MatchOutcome_name = map[int32]string{
		0:  "MATCH_OUTCOME_UNKNOWN",
		2:  "MATCH_OUTCOME_RAD_VICTORY",
		3:  "MATCH_OUTCOME_DIRE_VICTORY",
		64: "MATCH_OUTCOME_NOT_SCORED_POOR_NETWORK_CONDITIONS",
		65: "MATCH_OUTCOME_NOT_SCORED_LEAVER",
		66: "MATCH_OUTCOME_NOT_SCORED_SERVER_CRASH",
		67: "MATCH_OUTCOME_NOT_SCORED_NEVER_STARTED",
		68: "MATCH_OUTCOME_NOT_SCORED_CANCELED",
	}
	MatchOutcome_value = map[string]int32{
		"MATCH_OUTCOME_UNKNOWN":                            0,
		"MATCH_OUTCOME_RAD_VICTORY":                        2,
		"MATCH_OUTCOME_DIRE_VICTORY":                       3,
		"MATCH_OUTCOME_NOT_SCORED_POOR_NETWORK_CONDITIONS": 64,
		"MATCH_OUTCOME_NOT_SCORED_LEAVER":                  65,
		"MATCH_OUTCOME_NOT_SCORED_SERVER_CRASH":            66,
		"MATCH_OUTCOME_NOT_SCORED_NEVER_STARTED":           67,
		"MATCH_OUTCOME_NOT_SCORED_CANCELED":                68,
	}
)

func (x MatchOutcome) Enum() *MatchOutcome {
	p := new(MatchOutcome)
	*p = x
	return p
}

func (x MatchOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[7].Descriptor()
}

func (MatchOutcome) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[7]
}

func (x MatchOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchOutcome.Descriptor instead.
func (MatchOutcome) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{7}
}

type DotaAttribute int32

const (
	DotaAttribute_DOTA_ATTRIBUTE_UNSPECIFIED DotaAttribute = 0
	DotaAttribute_DOTA_ATTRIBUTE_STRENGTH    DotaAttribute = 1
	DotaAttribute_DOTA_ATTRIBUTE_AGILITY     DotaAttribute = 2
	DotaAttribute_DOTA_ATTRIBUTE_INTELLECT   DotaAttribute = 3
)

// Enum value maps for DotaAttribute.
var (
	DotaAttribute_name = map[int32]string{
		0: "DOTA_ATTRIBUTE_UNSPECIFIED",
		1: "DOTA_ATTRIBUTE_STRENGTH",
		2: "DOTA_ATTRIBUTE_AGILITY",
		3: "DOTA_ATTRIBUTE_INTELLECT",
	}
	DotaAttribute_value = map[string]int32{
		"DOTA_ATTRIBUTE_UNSPECIFIED": 0,
		"DOTA_ATTRIBUTE_STRENGTH":    1,
		"DOTA_ATTRIBUTE_AGILITY":     2,
		"DOTA_ATTRIBUTE_INTELLECT":   3,
	}
)

func (x DotaAttribute) Enum() *DotaAttribute {
	p := new(DotaAttribute)
	*p = x
	return p
}

func (x DotaAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DotaAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[8].Descriptor()
}

func (DotaAttribute) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[8]
}

func (x DotaAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DotaAttribute.Descriptor instead.
func (DotaAttribute) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{8}
}

type DotaUnitCap int32

const (
	DotaUnitCap_DOTA_UNIT_CAP_NO_ATTACK     DotaUnitCap = 0
	DotaUnitCap_DOTA_UNIT_CAP_MELEE_ATTACK  DotaUnitCap = 1
	DotaUnitCap_DOTA_UNIT_CAP_RANGED_ATTACK DotaUnitCap = 2
)

// Enum value maps for DotaUnitCap.
var (
	DotaUnitCap_name = map[int32]string{
		0: "DOTA_UNIT_CAP_NO_ATTACK",
		1: "DOTA_UNIT_CAP_MELEE_ATTACK",
		2: "DOTA_UNIT_CAP_RANGED_ATTACK",
	}
	DotaUnitCap_value = map[string]int32{
		"DOTA_UNIT_CAP_NO_ATTACK":     0,
		"DOTA_UNIT_CAP_MELEE_ATTACK":  1,
		"DOTA_UNIT_CAP_RANGED_ATTACK": 2,
	}
)

func (x DotaUnitCap) Enum() *DotaUnitCap {
	p := new(DotaUnitCap)
	*p = x
	return p
}

func (x DotaUnitCap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DotaUnitCap) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[9].Descriptor()
}

func (DotaUnitCap) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[9]
}

func (x DotaUnitCap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DotaUnitCap.Descriptor instead.
func (DotaUnitCap) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{9}
}

type HeroRole int32

const (
	HeroRole_HERO_ROLE_UNSPECIFIED HeroRole = 0
	HeroRole_HERO_ROLE_CARRY       HeroRole = 1
	HeroRole_HERO_ROLE_DISABLER    HeroRole = 2
	HeroRole_HERO_ROLE_DURABLE     HeroRole = 3
	HeroRole_HERO_ROLE_ESCAPE      HeroRole = 4
	HeroRole_HERO_ROLE_INITIATOR   HeroRole = 5
	HeroRole_HERO_ROLE_JUNGLER     HeroRole = 6
	HeroRole_HERO_ROLE_NUKER       HeroRole = 7
	HeroRole_HERO_ROLE_PUSHER      HeroRole = 8
	HeroRole_HERO_ROLE_SUPPORT     HeroRole = 9
)

// Enum value maps for HeroRole.
var (
	HeroRole_name = map[int32]string{
		0: "HERO_ROLE_UNSPECIFIED",
		1: "HERO_ROLE_CARRY",
		2: "HERO_ROLE_DISABLER",
		3: "HERO_ROLE_DURABLE",
		4: "HERO_ROLE_ESCAPE",
		5: "HERO_ROLE_INITIATOR",
		6: "HERO_ROLE_JUNGLER",
		7: "HERO_ROLE_NUKER",
		8: "HERO_ROLE_PUSHER",
		9: "HERO_ROLE_SUPPORT",
	}
	HeroRole_value = map[string]int32{
		"HERO_ROLE_UNSPECIFIED": 0,
		"HERO_ROLE_CARRY":       1,
		"HERO_ROLE_DISABLER":    2,
		"HERO_ROLE_DURABLE":     3,
		"HERO_ROLE_ESCAPE":      4,
		"HERO_ROLE_INITIATOR":   5,
		"HERO_ROLE_JUNGLER":     6,
		"HERO_ROLE_NUKER":       7,
		"HERO_ROLE_PUSHER":      8,
		"HERO_ROLE_SUPPORT":     9,
	}
)

func (x HeroRole) Enum() *HeroRole {
	p := new(HeroRole)
	*p = x
	return p
}

func (x HeroRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeroRole) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[10].Descriptor()
}

func (HeroRole) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[10]
}

func (x HeroRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeroRole.Descriptor instead.
func (HeroRole) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{10}
}

type LeagueStatus int32

const (
	LeagueStatus_LEAGUE_STATUS_UNSET       LeagueStatus = 0
	LeagueStatus_LEAGUE_STATUS_UNSUBMITTED LeagueStatus = 1
	LeagueStatus_LEAGUE_STATUS_SUBMITTED   LeagueStatus = 2
	LeagueStatus_LEAGUE_STATUS_ACCEPTED    LeagueStatus = 3
	LeagueStatus_LEAGUE_STATUS_REJECTED    LeagueStatus = 4
	LeagueStatus_LEAGUE_STATUS_CONCLUDED   LeagueStatus = 5
	LeagueStatus_LEAGUE_STATUS_DELETED     LeagueStatus = 6
)

// Enum value maps for LeagueStatus.
var (
	LeagueStatus_name = map[int32]string{
		0: "LEAGUE_STATUS_UNSET",
		1: "LEAGUE_STATUS_UNSUBMITTED",
		2: "LEAGUE_STATUS_SUBMITTED",
		3: "LEAGUE_STATUS_ACCEPTED",
		4: "LEAGUE_STATUS_REJECTED",
		5: "LEAGUE_STATUS_CONCLUDED",
		6: "LEAGUE_STATUS_DELETED",
	}
	LeagueStatus_value = map[string]int32{
		"LEAGUE_STATUS_UNSET":       0,
		"LEAGUE_STATUS_UNSUBMITTED": 1,
		"LEAGUE_STATUS_SUBMITTED":   2,
		"LEAGUE_STATUS_ACCEPTED":    3,
		"LEAGUE_STATUS_REJECTED":    4,
		"LEAGUE_STATUS_CONCLUDED":   5,
		"LEAGUE_STATUS_DELETED":     6,
	}
)

func (x LeagueStatus) Enum() *LeagueStatus {
	p := new(LeagueStatus)
	*p = x
	return p
}

func (x LeagueStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeagueStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[11].Descriptor()
}

func (LeagueStatus) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[11]
}

func (x LeagueStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeagueStatus.Descriptor instead.
func (LeagueStatus) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{11}
}

type LeagueRegion int32

const (
	LeagueRegion_LEAGUE_REGION_UNSET  LeagueRegion = 0
	LeagueRegion_LEAGUE_REGION_NA     LeagueRegion = 1
	LeagueRegion_LEAGUE_REGION_SA     LeagueRegion = 2
	LeagueRegion_LEAGUE_REGION_EUROPE LeagueRegion = 3
	LeagueRegion_LEAGUE_REGION_CIS    LeagueRegion = 4
	LeagueRegion_LEAGUE_REGION_CHINA  LeagueRegion = 5
	LeagueRegion_LEAGUE_REGION_SEA    LeagueRegion = 6
)

// Enum value maps for LeagueRegion.
var (
	LeagueRegion_name = map[int32]string{
		0: "LEAGUE_REGION_UNSET",
		1: "LEAGUE_REGION_NA",
		2: "LEAGUE_REGION_SA",
		3: "LEAGUE_REGION_EUROPE",
		4: "LEAGUE_REGION_CIS",
		5: "LEAGUE_REGION_CHINA",
		6: "LEAGUE_REGION_SEA",
	}
	LeagueRegion_value = map[string]int32{
		"LEAGUE_REGION_UNSET":  0,
		"LEAGUE_REGION_NA":     1,
		"LEAGUE_REGION_SA":     2,
		"LEAGUE_REGION_EUROPE": 3,
		"LEAGUE_REGION_CIS":    4,
		"LEAGUE_REGION_CHINA":  5,
		"LEAGUE_REGION_SEA":    6,
	}
)

func (x LeagueRegion) Enum() *LeagueRegion {
	p := new(LeagueRegion)
	*p = x
	return p
}

func (x LeagueRegion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeagueRegion) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[12].Descriptor()
}

func (LeagueRegion) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[12]
}

func (x LeagueRegion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeagueRegion.Descriptor instead.
func (LeagueRegion) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{12}
}

type LeagueTier int32

const (
	LeagueTier_LEAGUE_TIER_UNSET         LeagueTier = 0
	LeagueTier_LEAGUE_TIER_AMATEUR       LeagueTier = 1
	LeagueTier_LEAGUE_TIER_PROFESSIONAL  LeagueTier = 2
	LeagueTier_LEAGUE_TIER_MINOR         LeagueTier = 3
	LeagueTier_LEAGUE_TIER_MAJOR         LeagueTier = 4
	LeagueTier_LEAGUE_TIER_INTERNATIONAL LeagueTier = 5
	LeagueTier_LEAGUE_TIER_DPC_QUALIFIER LeagueTier = 6
)

// Enum value maps for LeagueTier.
var (
	LeagueTier_name = map[int32]string{
		0: "LEAGUE_TIER_UNSET",
		1: "LEAGUE_TIER_AMATEUR",
		2: "LEAGUE_TIER_PROFESSIONAL",
		3: "LEAGUE_TIER_MINOR",
		4: "LEAGUE_TIER_MAJOR",
		5: "LEAGUE_TIER_INTERNATIONAL",
		6: "LEAGUE_TIER_DPC_QUALIFIER",
	}
	LeagueTier_value = map[string]int32{
		"LEAGUE_TIER_UNSET":         0,
		"LEAGUE_TIER_AMATEUR":       1,
		"LEAGUE_TIER_PROFESSIONAL":  2,
		"LEAGUE_TIER_MINOR":         3,
		"LEAGUE_TIER_MAJOR":         4,
		"LEAGUE_TIER_INTERNATIONAL": 5,
		"LEAGUE_TIER_DPC_QUALIFIER": 6,
	}
)

func (x LeagueTier) Enum() *LeagueTier {
	p := new(LeagueTier)
	*p = x
	return p
}

func (x LeagueTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeagueTier) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[13].Descriptor()
}

func (LeagueTier) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[13]
}

func (x LeagueTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeagueTier.Descriptor instead.
func (LeagueTier) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{13}
}

type LeagueTierCategory int32

const (
	LeagueTierCategory_LEAGUE_TIER_CATEGORY_UNSPECIFIED  LeagueTierCategory = 0
	LeagueTierCategory_LEAGUE_TIER_CATEGORY_AMATEUR      LeagueTierCategory = 1
	LeagueTierCategory_LEAGUE_TIER_CATEGORY_PROFESSIONAL LeagueTierCategory = 2
	LeagueTierCategory_LEAGUE_TIER_CATEGORY_DPC          LeagueTierCategory = 3
)

// Enum value maps for LeagueTierCategory.
var (
	LeagueTierCategory_name = map[int32]string{
		0: "LEAGUE_TIER_CATEGORY_UNSPECIFIED",
		1: "LEAGUE_TIER_CATEGORY_AMATEUR",
		2: "LEAGUE_TIER_CATEGORY_PROFESSIONAL",
		3: "LEAGUE_TIER_CATEGORY_DPC",
	}
	LeagueTierCategory_value = map[string]int32{
		"LEAGUE_TIER_CATEGORY_UNSPECIFIED":  0,
		"LEAGUE_TIER_CATEGORY_AMATEUR":      1,
		"LEAGUE_TIER_CATEGORY_PROFESSIONAL": 2,
		"LEAGUE_TIER_CATEGORY_DPC":          3,
	}
)

func (x LeagueTierCategory) Enum() *LeagueTierCategory {
	p := new(LeagueTierCategory)
	*p = x
	return p
}

func (x LeagueTierCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeagueTierCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[14].Descriptor()
}

func (LeagueTierCategory) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[14]
}

func (x LeagueTierCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeagueTierCategory.Descriptor instead.
func (LeagueTierCategory) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{14}
}

type CDNLeagueImageVersion int32

const (
	CDNLeagueImageVersion_CDN_LEAGUE_IMAGE_VERSION_UNSPECIFIED    CDNLeagueImageVersion = 0
	CDNLeagueImageVersion_CDN_LEAGUE_IMAGE_VERSION_LOGO_LANDSCAPE CDNLeagueImageVersion = 1
	CDNLeagueImageVersion_CDN_LEAGUE_IMAGE_VERSION_BANNER         CDNLeagueImageVersion = 8
	CDNLeagueImageVersion_CDN_LEAGUE_IMAGE_VERSION_LOGO_PORTRAIT  CDNLeagueImageVersion = 9
)

// Enum value maps for CDNLeagueImageVersion.
var (
	CDNLeagueImageVersion_name = map[int32]string{
		0: "CDN_LEAGUE_IMAGE_VERSION_UNSPECIFIED",
		1: "CDN_LEAGUE_IMAGE_VERSION_LOGO_LANDSCAPE",
		8: "CDN_LEAGUE_IMAGE_VERSION_BANNER",
		9: "CDN_LEAGUE_IMAGE_VERSION_LOGO_PORTRAIT",
	}
	CDNLeagueImageVersion_value = map[string]int32{
		"CDN_LEAGUE_IMAGE_VERSION_UNSPECIFIED":    0,
		"CDN_LEAGUE_IMAGE_VERSION_LOGO_LANDSCAPE": 1,
		"CDN_LEAGUE_IMAGE_VERSION_BANNER":         8,
		"CDN_LEAGUE_IMAGE_VERSION_LOGO_PORTRAIT":  9,
	}
)

func (x CDNLeagueImageVersion) Enum() *CDNLeagueImageVersion {
	p := new(CDNLeagueImageVersion)
	*p = x
	return p
}

func (x CDNLeagueImageVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDNLeagueImageVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_enums_proto_enumTypes[15].Descriptor()
}

func (CDNLeagueImageVersion) Type() protoreflect.EnumType {
	return &file_protocol_enums_proto_enumTypes[15]
}

func (x CDNLeagueImageVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CDNLeagueImageVersion.Descriptor instead.
func (CDNLeagueImageVersion) EnumDescriptor() ([]byte, []int) {
	return file_protocol_enums_proto_rawDescGZIP(), []int{15}
}

var File_protocol_enums_proto protoreflect.FileDescriptor

var file_protocol_enums_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2a, 0xe3, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x42, 0x42, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x4f, 0x42, 0x42,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x53, 0x4f,
	0x4c, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06,
	0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x31, 0x56, 0x31, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x45,
	0x59, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x1a, 0x0a,
	0x16, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0c, 0x2a, 0xae, 0x04, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x44, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x44,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x52, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x57, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45,
	0x5f, 0x43, 0x4d, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x58, 0x4d, 0x41, 0x53, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10,
	0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d,
	0x4f, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4c, 0x50, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x31, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x48, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x44, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x42, 0x44, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x52, 0x44, 0x4d, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x56, 0x31, 0x5f, 0x4d, 0x49,
	0x44, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x55, 0x52, 0x42, 0x4f, 0x10,
	0x17, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d,
	0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x41, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x19, 0x2a, 0xef, 0x02, 0x0a, 0x09, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x54, 0x4f, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x43, 0x41, 0x53, 0x45, 0x10, 0x08,
	0x12, 0x20, 0x0a, 0x1c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50,
	0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x4f,
	0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x0b, 0x2a, 0xb6, 0x02, 0x0a,
	0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x4f,
	0x4f, 0x44, 0x47, 0x55, 0x59, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x44, 0x47, 0x55, 0x59, 0x53, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x55,
	0x54, 0x52, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x31, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x32, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x33,
	0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x34, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x35, 0x10, 0x0a,
	0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x36, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x37, 0x10, 0x0c, 0x12, 0x15,
	0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x38, 0x10, 0x0d, 0x2a, 0x5e, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x52, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x43, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x8a, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x4e, 0x54, 0x41, 0x53, 0x59,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x4e, 0x54, 0x41, 0x53, 0x59, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x4e, 0x54,
	0x41, 0x53, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x4e, 0x54, 0x41, 0x53, 0x59, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x41, 0x4e, 0x54, 0x41, 0x53, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x44,
	0x10, 0x04, 0x2a, 0x85, 0x01, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41,
	0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x55,
	0x4e, 0x47, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x41, 0x4d, 0x10, 0x05, 0x2a, 0xc1, 0x02, 0x0a, 0x0c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x5f, 0x56, 0x49, 0x43, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f,
	0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x5f, 0x56, 0x49, 0x43, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f,
	0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45,
	0x44, 0x5f, 0x50, 0x4f, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x40, 0x12, 0x23, 0x0a, 0x1f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x52, 0x10, 0x41,
	0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x10, 0x42, 0x12, 0x2a, 0x0a, 0x26, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x43, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x44, 0x2a, 0x86,
	0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f,
	0x41, 0x47, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x03, 0x2a, 0x6b, 0x0a, 0x0b, 0x44, 0x6f, 0x74, 0x61, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x43, 0x41, 0x50, 0x5f, 0x4d, 0x45, 0x4c, 0x45, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x43, 0x41, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x10, 0x02, 0x2a, 0xf1, 0x01, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x45, 0x53,
	0x43, 0x41, 0x50, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4a, 0x55, 0x4e,
	0x47, 0x4c, 0x45, 0x52, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x4e, 0x55, 0x4b, 0x45, 0x52, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x52, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x09, 0x2a, 0xd3, 0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45, 0x41,
	0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x45,
	0x41, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xb4,
	0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x13, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x41, 0x47,
	0x55, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x41, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x45, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x49, 0x53, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x49, 0x4e, 0x41, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x41, 0x10, 0x06, 0x2a, 0xc6, 0x01, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54,
	0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c,
	0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x41, 0x54, 0x45,
	0x55, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54,
	0x49, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x49, 0x45,
	0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x41,
	0x47, 0x55, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x1d, 0x0a, 0x19, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x44,
	0x50, 0x43, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x06, 0x2a, 0xa1,
	0x01, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x69, 0x65, 0x72, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x54, 0x49, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4c,
	0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x4d, 0x41, 0x54, 0x45, 0x55, 0x52, 0x10, 0x01, 0x12, 0x25, 0x0a,
	0x21, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54,
	0x49, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x50, 0x43,
	0x10, 0x03, 0x2a, 0xbf, 0x01, 0x0a, 0x15, 0x43, 0x44, 0x4e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x24,
	0x43, 0x44, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x44, 0x4e, 0x5f, 0x4c, 0x45,
	0x41, 0x47, 0x55, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x43, 0x41, 0x50,
	0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x44, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55,
	0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x44, 0x4e, 0x5f,
	0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41,
	0x49, 0x54, 0x10, 0x09, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x6c, 0x6b, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_enums_proto_rawDescOnce sync.Once
	file_protocol_enums_proto_rawDescData = file_protocol_enums_proto_rawDesc
)

func file_protocol_enums_proto_rawDescGZIP() []byte {
	file_protocol_enums_proto_rawDescOnce.Do(func() {
		file_protocol_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_enums_proto_rawDescData)
	})
	return file_protocol_enums_proto_rawDescData
}

var file_protocol_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_protocol_enums_proto_goTypes = []interface{}{
	(LobbyType)(0),             // 0: ns.protocol.LobbyType
	(GameMode)(0),              // 1: ns.protocol.GameMode
	(GameState)(0),             // 2: ns.protocol.GameState
	(GameTeam)(0),              // 3: ns.protocol.GameTeam
	(BuildingType)(0),          // 4: ns.protocol.BuildingType
	(FantasyRole)(0),           // 5: ns.protocol.FantasyRole
	(LaneType)(0),              // 6: ns.protocol.LaneType
	(MatchOutcome)(0),          // 7: ns.protocol.MatchOutcome
	(DotaAttribute)(0),         // 8: ns.protocol.DotaAttribute
	(DotaUnitCap)(0),           // 9: ns.protocol.DotaUnitCap
	(HeroRole)(0),              // 10: ns.protocol.HeroRole
	(LeagueStatus)(0),          // 11: ns.protocol.LeagueStatus
	(LeagueRegion)(0),          // 12: ns.protocol.LeagueRegion
	(LeagueTier)(0),            // 13: ns.protocol.LeagueTier
	(LeagueTierCategory)(0),    // 14: ns.protocol.LeagueTierCategory
	(CDNLeagueImageVersion)(0), // 15: ns.protocol.CDNLeagueImageVersion
}
var file_protocol_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protocol_enums_proto_init() }
func file_protocol_enums_proto_init() {
	if File_protocol_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_enums_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_enums_proto_goTypes,
		DependencyIndexes: file_protocol_enums_proto_depIdxs,
		EnumInfos:         file_protocol_enums_proto_enumTypes,
	}.Build()
	File_protocol_enums_proto = out.File
	file_protocol_enums_proto_rawDesc = nil
	file_protocol_enums_proto_goTypes = nil
	file_protocol_enums_proto_depIdxs = nil
}
