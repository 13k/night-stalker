// Code generated by modelgen. DO NOT EDIT.

package models

var _ Record = (*SteamServer)(nil)

var SteamServerModel Model = (*modelSteamServer)(nil)

type modelSteamServer struct{}

func (*modelSteamServer) Name() string             { return "SteamServer" }
func (*modelSteamServer) Table() Table             { return SteamServerTable }
func (*modelSteamServer) NewRecord() Record        { return &SteamServer{} }
func (*modelSteamServer) NewSlicePtr() interface{} { return &[]*SteamServer{} }

func (*modelSteamServer) AsRecordSlice(v interface{}) ([]Record, error) {
	sptr, ok := v.(*[]*SteamServer)

	if !ok {
		return nil, &ErrInvalidSliceType{Model: SteamServerModel, Value: v}
	}

	if sptr == nil || *sptr == nil {
		return nil, nil
	}

	rs := make([]Record, len(*sptr))

	for i, r := range *sptr {
		rs[i] = r
	}

	return rs, nil
}

func (*modelSteamServer) Associations() []Association {
	return nil
}

func (*modelSteamServer) Association(name string) (Association, error) {
	return nil, &ErrNotAssociated{Model: SteamServerModel, Assoc: name}
}

func (*SteamServer) Model() Model {
	return SteamServerModel
}

func (m *SteamServer) AssignRecord(record Record) (bool, error) {
	if other, ok := record.(*SteamServer); ok {
		return m.Assign(other), nil
	}

	return false, &ErrInvalidRecord{Model: m.Model(), Record: record}
}

func (m *SteamServer) AssignPartialRecord(record Record) (bool, error) {
	if other, ok := record.(*SteamServer); ok {
		return m.AssignPartial(other), nil
	}

	return false, &ErrInvalidRecord{Model: SteamServerModel, Record: record}
}

func (m *SteamServer) GetAssocPK(assoc string) (ID, error) {
	return m.ID, nil
}

func (m *SteamServer) GetAssocFK(assoc string) (ID, error) {
	return 0, &ErrNotAssociated{Model: SteamServerModel, Assoc: assoc}
}

func (m *SteamServer) SetAssociated(assoc string, records ...Record) error {
	return &ErrNotAssociated{Model: SteamServerModel, Assoc: assoc}
}
