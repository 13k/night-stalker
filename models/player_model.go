// Code generated by modelgen. DO NOT EDIT.

package models

var _ Record = (*Player)(nil)

var PlayerModel Model = (*modelPlayer)(nil)

type modelPlayer struct{}

func (*modelPlayer) Name() string             { return "Player" }
func (*modelPlayer) Table() Table             { return PlayerTable }
func (*modelPlayer) NewRecord() Record        { return &Player{} }
func (*modelPlayer) NewSlicePtr() interface{} { return &[]*Player{} }

func (*modelPlayer) AsRecordSlice(v interface{}) ([]Record, error) {
	sptr, ok := v.(*[]*Player)

	if !ok {
		return nil, &ErrInvalidSliceType{Model: PlayerModel, Value: v}
	}

	if sptr == nil || *sptr == nil {
		return nil, nil
	}

	rs := make([]Record, len(*sptr))

	for i, r := range *sptr {
		rs[i] = r
	}

	return rs, nil
}

func (*modelPlayer) Associations() []Association {
	return nil
}

func (*modelPlayer) Association(name string) (Association, error) {
	return nil, &ErrNotAssociated{Model: PlayerModel, Assoc: name}
}

func (*Player) Model() Model {
	return PlayerModel
}

func (m *Player) AssignRecord(record Record) (bool, error) {
	if other, ok := record.(*Player); ok {
		return m.Assign(other), nil
	}

	return false, &ErrInvalidRecord{Model: m.Model(), Record: record}
}

func (m *Player) AssignPartialRecord(record Record) (bool, error) {
	if other, ok := record.(*Player); ok {
		return m.AssignPartial(other), nil
	}

	return false, &ErrInvalidRecord{Model: PlayerModel, Record: record}
}

func (m *Player) GetAssocPK(assoc string) (ID, error) {
	return m.ID, nil
}

func (m *Player) GetAssocFK(assoc string) (ID, error) {
	return 0, &ErrNotAssociated{Model: PlayerModel, Assoc: assoc}
}

func (m *Player) SetAssociated(assoc string, records ...Record) error {
	return &ErrNotAssociated{Model: PlayerModel, Assoc: assoc}
}
