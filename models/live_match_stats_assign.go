// Code generated by modelgen. DO NOT EDIT.

package models

import (
	nssql "github.com/13k/night-stalker/internal/sql"
)

// Assign assigns fields from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func (m *LiveMatchStats) Assign(other *LiveMatchStats) (dirty bool) {
	if other == nil {
		return false
	}

	if m.ID != other.ID {
		m.ID = other.ID
		dirty = true
	}

	if m.ServerID != other.ServerID {
		m.ServerID = other.ServerID
		dirty = true
	}

	if m.LeagueNodeID != other.LeagueNodeID {
		m.LeagueNodeID = other.LeagueNodeID
		dirty = true
	}

	if m.GameTimestamp != other.GameTimestamp {
		m.GameTimestamp = other.GameTimestamp
		dirty = true
	}

	if m.GameTime != other.GameTime {
		m.GameTime = other.GameTime
		dirty = true
	}

	if m.GameMode != other.GameMode {
		m.GameMode = other.GameMode
		dirty = true
	}

	if m.GameState != other.GameState {
		m.GameState = other.GameState
		dirty = true
	}

	if m.DeltaFrame != other.DeltaFrame {
		m.DeltaFrame = other.DeltaFrame
		dirty = true
	}

	if !IntsEqual(m.GraphGold, other.GraphGold) {
		m.GraphGold = other.GraphGold
		dirty = true
	}

	if !IntsEqual(m.GraphXP, other.GraphXP) {
		m.GraphXP = other.GraphXP
		dirty = true
	}

	if !IntsEqual(m.GraphKill, other.GraphKill) {
		m.GraphKill = other.GraphKill
		dirty = true
	}

	if !IntsEqual(m.GraphTower, other.GraphTower) {
		m.GraphTower = other.GraphTower
		dirty = true
	}

	if !IntsEqual(m.GraphRax, other.GraphRax) {
		m.GraphRax = other.GraphRax
		dirty = true
	}

	if !nssql.IntArrayEqual(m.SteamBroadcasterAccountIDs, other.SteamBroadcasterAccountIDs) {
		m.SteamBroadcasterAccountIDs = other.SteamBroadcasterAccountIDs
		dirty = true
	}

	if m.LiveMatchID != other.LiveMatchID {
		m.LiveMatchID = other.LiveMatchID
		dirty = true
	}

	if m.MatchID != other.MatchID {
		m.MatchID = other.MatchID
		dirty = true
	}

	if m.LeagueID != other.LeagueID {
		m.LeagueID = other.LeagueID
		dirty = true
	}

	if !m.CreatedAt.Equal(other.CreatedAt) {
		m.CreatedAt = other.CreatedAt
		dirty = true
	}

	if !m.UpdatedAt.Equal(other.UpdatedAt) {
		m.UpdatedAt = other.UpdatedAt
		dirty = true
	}

	if !nssql.NullTimeEqual(m.DeletedAt, other.DeletedAt) {
		m.DeletedAt = other.DeletedAt
		dirty = true
	}

	return
}

// AssignPartial assigns fields with non-zero values from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func (m *LiveMatchStats) AssignPartial(other *LiveMatchStats) (dirty bool) {
	if other == nil {
		return false
	}

	if other.ID != 0 && m.ID != other.ID {
		m.ID = other.ID
		dirty = true
	}

	if other.ServerID != 0 && m.ServerID != other.ServerID {
		m.ServerID = other.ServerID
		dirty = true
	}

	if other.LeagueNodeID != 0 && m.LeagueNodeID != other.LeagueNodeID {
		m.LeagueNodeID = other.LeagueNodeID
		dirty = true
	}

	if other.GameTimestamp != 0 && m.GameTimestamp != other.GameTimestamp {
		m.GameTimestamp = other.GameTimestamp
		dirty = true
	}

	if other.GameTime != 0 && m.GameTime != other.GameTime {
		m.GameTime = other.GameTime
		dirty = true
	}

	if other.GameMode != 0 && m.GameMode != other.GameMode {
		m.GameMode = other.GameMode
		dirty = true
	}

	if other.GameState != 0 && m.GameState != other.GameState {
		m.GameState = other.GameState
		dirty = true
	}

	if other.DeltaFrame && m.DeltaFrame != other.DeltaFrame {
		m.DeltaFrame = other.DeltaFrame
		dirty = true
	}

	if other.GraphGold != nil && !IntsEqual(m.GraphGold, other.GraphGold) {
		m.GraphGold = other.GraphGold
		dirty = true
	}

	if other.GraphXP != nil && !IntsEqual(m.GraphXP, other.GraphXP) {
		m.GraphXP = other.GraphXP
		dirty = true
	}

	if other.GraphKill != nil && !IntsEqual(m.GraphKill, other.GraphKill) {
		m.GraphKill = other.GraphKill
		dirty = true
	}

	if other.GraphTower != nil && !IntsEqual(m.GraphTower, other.GraphTower) {
		m.GraphTower = other.GraphTower
		dirty = true
	}

	if other.GraphRax != nil && !IntsEqual(m.GraphRax, other.GraphRax) {
		m.GraphRax = other.GraphRax
		dirty = true
	}

	if other.SteamBroadcasterAccountIDs != nil && !nssql.IntArrayEqual(m.SteamBroadcasterAccountIDs, other.SteamBroadcasterAccountIDs) {
		m.SteamBroadcasterAccountIDs = other.SteamBroadcasterAccountIDs
		dirty = true
	}

	if other.LiveMatchID != 0 && m.LiveMatchID != other.LiveMatchID {
		m.LiveMatchID = other.LiveMatchID
		dirty = true
	}

	if other.MatchID != 0 && m.MatchID != other.MatchID {
		m.MatchID = other.MatchID
		dirty = true
	}

	if other.LeagueID != 0 && m.LeagueID != other.LeagueID {
		m.LeagueID = other.LeagueID
		dirty = true
	}

	if !other.CreatedAt.IsZero() && !m.CreatedAt.Equal(other.CreatedAt) {
		m.CreatedAt = other.CreatedAt
		dirty = true
	}

	if !other.UpdatedAt.IsZero() && !m.UpdatedAt.Equal(other.UpdatedAt) {
		m.UpdatedAt = other.UpdatedAt
		dirty = true
	}

	if !nssql.NullTimeIsZero(other.DeletedAt) && !nssql.NullTimeEqual(m.DeletedAt, other.DeletedAt) {
		m.DeletedAt = other.DeletedAt
		dirty = true
	}

	return
}
