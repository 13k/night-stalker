// Code generated by modelgen. DO NOT EDIT.

package models

import (
	nssql "github.com/13k/night-stalker/internal/sql"
)

// Assign assigns fields from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func (m *LiveMatch) Assign(other *LiveMatch) (dirty bool) {
	if other == nil {
		return false
	}

	if m.ID != other.ID {
		m.ID = other.ID
		dirty = true
	}

	if m.ServerID != other.ServerID {
		m.ServerID = other.ServerID
		dirty = true
	}

	if m.LobbyID != other.LobbyID {
		m.LobbyID = other.LobbyID
		dirty = true
	}

	if m.LobbyType != other.LobbyType {
		m.LobbyType = other.LobbyType
		dirty = true
	}

	if m.SeriesID != other.SeriesID {
		m.SeriesID = other.SeriesID
		dirty = true
	}

	if m.GameMode != other.GameMode {
		m.GameMode = other.GameMode
		dirty = true
	}

	if m.AverageMMR != other.AverageMMR {
		m.AverageMMR = other.AverageMMR
		dirty = true
	}

	if m.RadiantLead != other.RadiantLead {
		m.RadiantLead = other.RadiantLead
		dirty = true
	}

	if m.RadiantTeamName != other.RadiantTeamName {
		m.RadiantTeamName = other.RadiantTeamName
		dirty = true
	}

	if m.RadiantTeamLogo != other.RadiantTeamLogo {
		m.RadiantTeamLogo = other.RadiantTeamLogo
		dirty = true
	}

	if m.RadiantScore != other.RadiantScore {
		m.RadiantScore = other.RadiantScore
		dirty = true
	}

	if m.DireTeamName != other.DireTeamName {
		m.DireTeamName = other.DireTeamName
		dirty = true
	}

	if m.DireTeamLogo != other.DireTeamLogo {
		m.DireTeamLogo = other.DireTeamLogo
		dirty = true
	}

	if m.DireScore != other.DireScore {
		m.DireScore = other.DireScore
		dirty = true
	}

	if m.Delay != other.Delay {
		m.Delay = other.Delay
		dirty = true
	}

	if !nssql.NullTimeEqual(m.ActivateTime, other.ActivateTime) {
		m.ActivateTime = other.ActivateTime
		dirty = true
	}

	if !nssql.NullTimeEqual(m.DeactivateTime, other.DeactivateTime) {
		m.DeactivateTime = other.DeactivateTime
		dirty = true
	}

	if !nssql.NullTimeEqual(m.LastUpdateTime, other.LastUpdateTime) {
		m.LastUpdateTime = other.LastUpdateTime
		dirty = true
	}

	if m.GameTime != other.GameTime {
		m.GameTime = other.GameTime
		dirty = true
	}

	if m.Spectators != other.Spectators {
		m.Spectators = other.Spectators
		dirty = true
	}

	if m.SortScore != other.SortScore {
		m.SortScore = other.SortScore
		dirty = true
	}

	if m.BuildingState != other.BuildingState {
		m.BuildingState = other.BuildingState
		dirty = true
	}

	if m.WeekendTourneyTournamentID != other.WeekendTourneyTournamentID {
		m.WeekendTourneyTournamentID = other.WeekendTourneyTournamentID
		dirty = true
	}

	if m.WeekendTourneyDivision != other.WeekendTourneyDivision {
		m.WeekendTourneyDivision = other.WeekendTourneyDivision
		dirty = true
	}

	if m.WeekendTourneySkillLevel != other.WeekendTourneySkillLevel {
		m.WeekendTourneySkillLevel = other.WeekendTourneySkillLevel
		dirty = true
	}

	if m.WeekendTourneyBracketRound != other.WeekendTourneyBracketRound {
		m.WeekendTourneyBracketRound = other.WeekendTourneyBracketRound
		dirty = true
	}

	if m.MatchID != other.MatchID {
		m.MatchID = other.MatchID
		dirty = true
	}

	if m.LeagueID != other.LeagueID {
		m.LeagueID = other.LeagueID
		dirty = true
	}

	if m.RadiantTeamID != other.RadiantTeamID {
		m.RadiantTeamID = other.RadiantTeamID
		dirty = true
	}

	if m.DireTeamID != other.DireTeamID {
		m.DireTeamID = other.DireTeamID
		dirty = true
	}

	if !m.CreatedAt.Equal(other.CreatedAt) {
		m.CreatedAt = other.CreatedAt
		dirty = true
	}

	if !m.UpdatedAt.Equal(other.UpdatedAt) {
		m.UpdatedAt = other.UpdatedAt
		dirty = true
	}

	if !nssql.NullTimeEqual(m.DeletedAt, other.DeletedAt) {
		m.DeletedAt = other.DeletedAt
		dirty = true
	}

	return
}

// AssignPartial assigns fields with non-zero values from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func (m *LiveMatch) AssignPartial(other *LiveMatch) (dirty bool) {
	if other == nil {
		return false
	}

	if other.ID != 0 && m.ID != other.ID {
		m.ID = other.ID
		dirty = true
	}

	if other.ServerID != 0 && m.ServerID != other.ServerID {
		m.ServerID = other.ServerID
		dirty = true
	}

	if other.LobbyID != 0 && m.LobbyID != other.LobbyID {
		m.LobbyID = other.LobbyID
		dirty = true
	}

	if other.LobbyType != 0 && m.LobbyType != other.LobbyType {
		m.LobbyType = other.LobbyType
		dirty = true
	}

	if other.SeriesID != 0 && m.SeriesID != other.SeriesID {
		m.SeriesID = other.SeriesID
		dirty = true
	}

	if other.GameMode != 0 && m.GameMode != other.GameMode {
		m.GameMode = other.GameMode
		dirty = true
	}

	if other.AverageMMR != 0 && m.AverageMMR != other.AverageMMR {
		m.AverageMMR = other.AverageMMR
		dirty = true
	}

	if other.RadiantLead != 0 && m.RadiantLead != other.RadiantLead {
		m.RadiantLead = other.RadiantLead
		dirty = true
	}

	if other.RadiantTeamName != "" && m.RadiantTeamName != other.RadiantTeamName {
		m.RadiantTeamName = other.RadiantTeamName
		dirty = true
	}

	if other.RadiantTeamLogo != 0 && m.RadiantTeamLogo != other.RadiantTeamLogo {
		m.RadiantTeamLogo = other.RadiantTeamLogo
		dirty = true
	}

	if other.RadiantScore != 0 && m.RadiantScore != other.RadiantScore {
		m.RadiantScore = other.RadiantScore
		dirty = true
	}

	if other.DireTeamName != "" && m.DireTeamName != other.DireTeamName {
		m.DireTeamName = other.DireTeamName
		dirty = true
	}

	if other.DireTeamLogo != 0 && m.DireTeamLogo != other.DireTeamLogo {
		m.DireTeamLogo = other.DireTeamLogo
		dirty = true
	}

	if other.DireScore != 0 && m.DireScore != other.DireScore {
		m.DireScore = other.DireScore
		dirty = true
	}

	if other.Delay != 0 && m.Delay != other.Delay {
		m.Delay = other.Delay
		dirty = true
	}

	if !nssql.NullTimeIsZero(other.ActivateTime) && !nssql.NullTimeEqual(m.ActivateTime, other.ActivateTime) {
		m.ActivateTime = other.ActivateTime
		dirty = true
	}

	if !nssql.NullTimeIsZero(other.DeactivateTime) && !nssql.NullTimeEqual(m.DeactivateTime, other.DeactivateTime) {
		m.DeactivateTime = other.DeactivateTime
		dirty = true
	}

	if !nssql.NullTimeIsZero(other.LastUpdateTime) && !nssql.NullTimeEqual(m.LastUpdateTime, other.LastUpdateTime) {
		m.LastUpdateTime = other.LastUpdateTime
		dirty = true
	}

	if other.GameTime != 0 && m.GameTime != other.GameTime {
		m.GameTime = other.GameTime
		dirty = true
	}

	if other.Spectators != 0 && m.Spectators != other.Spectators {
		m.Spectators = other.Spectators
		dirty = true
	}

	if other.SortScore != 0 && m.SortScore != other.SortScore {
		m.SortScore = other.SortScore
		dirty = true
	}

	if other.BuildingState != 0 && m.BuildingState != other.BuildingState {
		m.BuildingState = other.BuildingState
		dirty = true
	}

	if other.WeekendTourneyTournamentID != 0 && m.WeekendTourneyTournamentID != other.WeekendTourneyTournamentID {
		m.WeekendTourneyTournamentID = other.WeekendTourneyTournamentID
		dirty = true
	}

	if other.WeekendTourneyDivision != 0 && m.WeekendTourneyDivision != other.WeekendTourneyDivision {
		m.WeekendTourneyDivision = other.WeekendTourneyDivision
		dirty = true
	}

	if other.WeekendTourneySkillLevel != 0 && m.WeekendTourneySkillLevel != other.WeekendTourneySkillLevel {
		m.WeekendTourneySkillLevel = other.WeekendTourneySkillLevel
		dirty = true
	}

	if other.WeekendTourneyBracketRound != 0 && m.WeekendTourneyBracketRound != other.WeekendTourneyBracketRound {
		m.WeekendTourneyBracketRound = other.WeekendTourneyBracketRound
		dirty = true
	}

	if other.MatchID != 0 && m.MatchID != other.MatchID {
		m.MatchID = other.MatchID
		dirty = true
	}

	if other.LeagueID != 0 && m.LeagueID != other.LeagueID {
		m.LeagueID = other.LeagueID
		dirty = true
	}

	if other.RadiantTeamID != 0 && m.RadiantTeamID != other.RadiantTeamID {
		m.RadiantTeamID = other.RadiantTeamID
		dirty = true
	}

	if other.DireTeamID != 0 && m.DireTeamID != other.DireTeamID {
		m.DireTeamID = other.DireTeamID
		dirty = true
	}

	if !other.CreatedAt.IsZero() && !m.CreatedAt.Equal(other.CreatedAt) {
		m.CreatedAt = other.CreatedAt
		dirty = true
	}

	if !other.UpdatedAt.IsZero() && !m.UpdatedAt.Equal(other.UpdatedAt) {
		m.UpdatedAt = other.UpdatedAt
		dirty = true
	}

	if !nssql.NullTimeIsZero(other.DeletedAt) && !nssql.NullTimeEqual(m.DeletedAt, other.DeletedAt) {
		m.DeletedAt = other.DeletedAt
		dirty = true
	}

	return
}
