// Code generated by modelgen. DO NOT EDIT.

package models

import (
	nssql "github.com/13k/night-stalker/internal/sql"
)

// Assign assigns fields from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func (m *LiveMatchStatsBuilding) Assign(other *LiveMatchStatsBuilding) (dirty bool) {
	if other == nil {
		return false
	}

	if m.ID != other.ID {
		m.ID = other.ID
		dirty = true
	}

	if m.GameTeam != other.GameTeam {
		m.GameTeam = other.GameTeam
		dirty = true
	}

	if m.Heading != other.Heading {
		m.Heading = other.Heading
		dirty = true
	}

	if m.Type != other.Type {
		m.Type = other.Type
		dirty = true
	}

	if m.Lane != other.Lane {
		m.Lane = other.Lane
		dirty = true
	}

	if m.Tier != other.Tier {
		m.Tier = other.Tier
		dirty = true
	}

	if m.PosX != other.PosX {
		m.PosX = other.PosX
		dirty = true
	}

	if m.PosY != other.PosY {
		m.PosY = other.PosY
		dirty = true
	}

	if m.Destroyed != other.Destroyed {
		m.Destroyed = other.Destroyed
		dirty = true
	}

	if m.LiveMatchStatsID != other.LiveMatchStatsID {
		m.LiveMatchStatsID = other.LiveMatchStatsID
		dirty = true
	}

	if !m.CreatedAt.Equal(other.CreatedAt) {
		m.CreatedAt = other.CreatedAt
		dirty = true
	}

	if !m.UpdatedAt.Equal(other.UpdatedAt) {
		m.UpdatedAt = other.UpdatedAt
		dirty = true
	}

	if !nssql.NullTimeEqual(m.DeletedAt, other.DeletedAt) {
		m.DeletedAt = other.DeletedAt
		dirty = true
	}

	return
}

// AssignPartial assigns fields with non-zero values from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func (m *LiveMatchStatsBuilding) AssignPartial(other *LiveMatchStatsBuilding) (dirty bool) {
	if other == nil {
		return false
	}

	if other.ID != 0 && m.ID != other.ID {
		m.ID = other.ID
		dirty = true
	}

	if other.GameTeam != 0 && m.GameTeam != other.GameTeam {
		m.GameTeam = other.GameTeam
		dirty = true
	}

	if other.Heading != 0 && m.Heading != other.Heading {
		m.Heading = other.Heading
		dirty = true
	}

	if other.Type != 0 && m.Type != other.Type {
		m.Type = other.Type
		dirty = true
	}

	if other.Lane != 0 && m.Lane != other.Lane {
		m.Lane = other.Lane
		dirty = true
	}

	if other.Tier != 0 && m.Tier != other.Tier {
		m.Tier = other.Tier
		dirty = true
	}

	if other.PosX != 0 && m.PosX != other.PosX {
		m.PosX = other.PosX
		dirty = true
	}

	if other.PosY != 0 && m.PosY != other.PosY {
		m.PosY = other.PosY
		dirty = true
	}

	if other.Destroyed && m.Destroyed != other.Destroyed {
		m.Destroyed = other.Destroyed
		dirty = true
	}

	if other.LiveMatchStatsID != 0 && m.LiveMatchStatsID != other.LiveMatchStatsID {
		m.LiveMatchStatsID = other.LiveMatchStatsID
		dirty = true
	}

	if !other.CreatedAt.IsZero() && !m.CreatedAt.Equal(other.CreatedAt) {
		m.CreatedAt = other.CreatedAt
		dirty = true
	}

	if !other.UpdatedAt.IsZero() && !m.UpdatedAt.Equal(other.UpdatedAt) {
		m.UpdatedAt = other.UpdatedAt
		dirty = true
	}

	if !nssql.NullTimeIsZero(other.DeletedAt) && !nssql.NullTimeEqual(m.DeletedAt, other.DeletedAt) {
		m.DeletedAt = other.DeletedAt
		dirty = true
	}

	return
}
