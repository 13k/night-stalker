// Code generated by modelgen. DO NOT EDIT.

package models

var _ Record = (*SteamLogin)(nil)

var SteamLoginModel Model = (*modelSteamLogin)(nil)

type modelSteamLogin struct{}

func (*modelSteamLogin) Name() string             { return "SteamLogin" }
func (*modelSteamLogin) Table() Table             { return SteamLoginTable }
func (*modelSteamLogin) NewRecord() Record        { return &SteamLogin{} }
func (*modelSteamLogin) NewSlicePtr() interface{} { return &[]*SteamLogin{} }

func (*modelSteamLogin) AsRecordSlice(v interface{}) ([]Record, error) {
	sptr, ok := v.(*[]*SteamLogin)

	if !ok {
		return nil, &ErrInvalidSliceType{Model: SteamLoginModel, Value: v}
	}

	if sptr == nil || *sptr == nil {
		return nil, nil
	}

	rs := make([]Record, len(*sptr))

	for i, r := range *sptr {
		rs[i] = r
	}

	return rs, nil
}

func (*modelSteamLogin) Associations() []Association {
	return nil
}

func (*modelSteamLogin) Association(name string) (Association, error) {
	return nil, &ErrNotAssociated{Model: SteamLoginModel, Assoc: name}
}

func (*SteamLogin) Model() Model {
	return SteamLoginModel
}

func (m *SteamLogin) AssignRecord(record Record) (bool, error) {
	if other, ok := record.(*SteamLogin); ok {
		return m.Assign(other), nil
	}

	return false, &ErrInvalidRecord{Model: m.Model(), Record: record}
}

func (m *SteamLogin) AssignPartialRecord(record Record) (bool, error) {
	if other, ok := record.(*SteamLogin); ok {
		return m.AssignPartial(other), nil
	}

	return false, &ErrInvalidRecord{Model: SteamLoginModel, Record: record}
}

func (m *SteamLogin) GetAssocPK(assoc string) (ID, error) {
	return m.ID, nil
}

func (m *SteamLogin) GetAssocFK(assoc string) (ID, error) {
	return 0, &ErrNotAssociated{Model: SteamLoginModel, Assoc: assoc}
}

func (m *SteamLogin) SetAssociated(assoc string, records ...Record) error {
	return &ErrNotAssociated{Model: SteamLoginModel, Assoc: assoc}
}
