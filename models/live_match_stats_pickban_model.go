// Code generated by modelgen. DO NOT EDIT.

package models

var _ Record = (*LiveMatchStatsPickBan)(nil)

var LiveMatchStatsPickBanModel Model = (*modelLiveMatchStatsPickBan)(nil)

// uses an anonymous struct to have compile-time checks when using associations
var assocLiveMatchStatsPickBan = struct {
	LiveMatchStats Association
	Hero           Association
}{
	LiveMatchStats: NewAssociation(
		BelongsTo,
		&ModelAssociation{Model: LiveMatchStatsPickBanModel, Name: "LiveMatchStats", PK: "id", FK: "live_match_stats_id"},
		&ModelAssociation{Model: LiveMatchStatsModel, Name: "LiveMatchStatsPickBan", PK: "id", FK: ""},
	),
	Hero: NewAssociation(
		BelongsTo,
		&ModelAssociation{Model: LiveMatchStatsPickBanModel, Name: "Hero", PK: "id", FK: "hero_id"},
		&ModelAssociation{Model: HeroModel, Name: "LiveMatchStatsPickBan", PK: "id", FK: ""},
	),
}

type modelLiveMatchStatsPickBan struct{}

func (*modelLiveMatchStatsPickBan) Name() string             { return "LiveMatchStatsPickBan" }
func (*modelLiveMatchStatsPickBan) Table() Table             { return LiveMatchStatsPickBanTable }
func (*modelLiveMatchStatsPickBan) NewRecord() Record        { return &LiveMatchStatsPickBan{} }
func (*modelLiveMatchStatsPickBan) NewSlicePtr() interface{} { return &[]*LiveMatchStatsPickBan{} }

func (*modelLiveMatchStatsPickBan) AsRecordSlice(v interface{}) ([]Record, error) {
	sptr, ok := v.(*[]*LiveMatchStatsPickBan)

	if !ok {
		return nil, &ErrInvalidSliceType{Model: LiveMatchStatsPickBanModel, Value: v}
	}

	if sptr == nil || *sptr == nil {
		return nil, nil
	}

	rs := make([]Record, len(*sptr))

	for i, r := range *sptr {
		rs[i] = r
	}

	return rs, nil
}

func (*modelLiveMatchStatsPickBan) Associations() []Association {
	return []Association{
		assocLiveMatchStatsPickBan.LiveMatchStats,
		assocLiveMatchStatsPickBan.Hero,
	}
}

func (*modelLiveMatchStatsPickBan) Association(name string) (Association, error) {
	switch name {
	case "LiveMatchStats":
		return assocLiveMatchStatsPickBan.LiveMatchStats, nil
	case "Hero":
		return assocLiveMatchStatsPickBan.Hero, nil
	}

	return nil, &ErrNotAssociated{Model: LiveMatchStatsPickBanModel, Assoc: name}
}

func (*LiveMatchStatsPickBan) Model() Model {
	return LiveMatchStatsPickBanModel
}

func (m *LiveMatchStatsPickBan) AssignRecord(record Record) (bool, error) {
	if other, ok := record.(*LiveMatchStatsPickBan); ok {
		return m.Assign(other), nil
	}

	return false, &ErrInvalidRecord{Model: m.Model(), Record: record}
}

func (m *LiveMatchStatsPickBan) AssignPartialRecord(record Record) (bool, error) {
	if other, ok := record.(*LiveMatchStatsPickBan); ok {
		return m.AssignPartial(other), nil
	}

	return false, &ErrInvalidRecord{Model: LiveMatchStatsPickBanModel, Record: record}
}

func (m *LiveMatchStatsPickBan) GetAssocPK(assoc string) (ID, error) {
	return m.ID, nil
}

func (m *LiveMatchStatsPickBan) GetAssocFK(assoc string) (ID, error) {
	switch assoc {
	case "LiveMatchStats":
		return m.LiveMatchStatsID, nil
	case "Hero":
		return m.HeroID, nil
	}

	return 0, &ErrNotAssociated{Model: LiveMatchStatsPickBanModel, Assoc: assoc}
}

func (m *LiveMatchStatsPickBan) SetAssociated(assoc string, records ...Record) error {
	if len(records) == 0 {
		return nil
	}

	switch assoc {
	case "LiveMatchStats":
		r := records[0]

		if mr, ok := r.(*LiveMatchStats); ok {
			m.LiveMatchStats = mr
			return nil
		}

		return &ErrInvalidAssociationRecord{Assoc: assocLiveMatchStatsPickBan.LiveMatchStats, Record: r}
	case "Hero":
		r := records[0]

		if mr, ok := r.(*Hero); ok {
			m.Hero = mr
			return nil
		}

		return &ErrInvalidAssociationRecord{Assoc: assocLiveMatchStatsPickBan.Hero, Record: r}
	}

	return &ErrNotAssociated{Model: LiveMatchStatsPickBanModel, Assoc: assoc}
}
