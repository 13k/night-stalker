// Code generated by modelgen. DO NOT EDIT.

package models

import (
	"bytes"

	nssql "github.com/13k/night-stalker/internal/sql"
)

// Assign assigns fields from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func (m *SteamLogin) Assign(other *SteamLogin) (dirty bool) {
	if other == nil {
		return false
	}

	if m.ID != other.ID {
		m.ID = other.ID
		dirty = true
	}

	if m.Username != other.Username {
		m.Username = other.Username
		dirty = true
	}

	if m.SteamID != other.SteamID {
		m.SteamID = other.SteamID
		dirty = true
	}

	if m.AccountFlags != other.AccountFlags {
		m.AccountFlags = other.AccountFlags
		dirty = true
	}

	if !bytes.Equal(m.MachineHash, other.MachineHash) {
		m.MachineHash = other.MachineHash
		dirty = true
	}

	if m.UniqueID != other.UniqueID {
		m.UniqueID = other.UniqueID
		dirty = true
	}

	if m.LoginKey != other.LoginKey {
		m.LoginKey = other.LoginKey
		dirty = true
	}

	if m.WebAuthNonce != other.WebAuthNonce {
		m.WebAuthNonce = other.WebAuthNonce
		dirty = true
	}

	if m.WebSessionID != other.WebSessionID {
		m.WebSessionID = other.WebSessionID
		dirty = true
	}

	if m.WebAuthToken != other.WebAuthToken {
		m.WebAuthToken = other.WebAuthToken
		dirty = true
	}

	if m.WebAuthTokenSecure != other.WebAuthTokenSecure {
		m.WebAuthTokenSecure = other.WebAuthTokenSecure
		dirty = true
	}

	if !nssql.NullTimeEqual(m.SuspendedUntil, other.SuspendedUntil) {
		m.SuspendedUntil = other.SuspendedUntil
		dirty = true
	}

	if m.GameVersion != other.GameVersion {
		m.GameVersion = other.GameVersion
		dirty = true
	}

	if m.LocationCountry != other.LocationCountry {
		m.LocationCountry = other.LocationCountry
		dirty = true
	}

	if m.LocationLatitude != other.LocationLatitude {
		m.LocationLatitude = other.LocationLatitude
		dirty = true
	}

	if m.LocationLongitude != other.LocationLongitude {
		m.LocationLongitude = other.LocationLongitude
		dirty = true
	}

	if m.CellID != other.CellID {
		m.CellID = other.CellID
		dirty = true
	}

	if m.CellIDPingThreshold != other.CellIDPingThreshold {
		m.CellIDPingThreshold = other.CellIDPingThreshold
		dirty = true
	}

	if m.EmailDomain != other.EmailDomain {
		m.EmailDomain = other.EmailDomain
		dirty = true
	}

	if m.VanityURL != other.VanityURL {
		m.VanityURL = other.VanityURL
		dirty = true
	}

	if m.OutOfGameHeartbeatSeconds != other.OutOfGameHeartbeatSeconds {
		m.OutOfGameHeartbeatSeconds = other.OutOfGameHeartbeatSeconds
		dirty = true
	}

	if m.InGameHeartbeatSeconds != other.InGameHeartbeatSeconds {
		m.InGameHeartbeatSeconds = other.InGameHeartbeatSeconds
		dirty = true
	}

	if m.PublicIP != other.PublicIP {
		m.PublicIP = other.PublicIP
		dirty = true
	}

	if m.ServerTime != other.ServerTime {
		m.ServerTime = other.ServerTime
		dirty = true
	}

	if !bytes.Equal(m.SteamTicket, other.SteamTicket) {
		m.SteamTicket = other.SteamTicket
		dirty = true
	}

	if m.UsePics != other.UsePics {
		m.UsePics = other.UsePics
		dirty = true
	}

	if m.CountryCode != other.CountryCode {
		m.CountryCode = other.CountryCode
		dirty = true
	}

	if !bytes.Equal(m.ParentalSettings, other.ParentalSettings) {
		m.ParentalSettings = other.ParentalSettings
		dirty = true
	}

	if !bytes.Equal(m.ParentalSettingSignature, other.ParentalSettingSignature) {
		m.ParentalSettingSignature = other.ParentalSettingSignature
		dirty = true
	}

	if m.LoginFailuresToMigrate != other.LoginFailuresToMigrate {
		m.LoginFailuresToMigrate = other.LoginFailuresToMigrate
		dirty = true
	}

	if m.DisconnectsToMigrate != other.DisconnectsToMigrate {
		m.DisconnectsToMigrate = other.DisconnectsToMigrate
		dirty = true
	}

	if m.OgsDataReportTimeWindow != other.OgsDataReportTimeWindow {
		m.OgsDataReportTimeWindow = other.OgsDataReportTimeWindow
		dirty = true
	}

	if m.ClientInstanceID != other.ClientInstanceID {
		m.ClientInstanceID = other.ClientInstanceID
		dirty = true
	}

	if m.ForceClientUpdateCheck != other.ForceClientUpdateCheck {
		m.ForceClientUpdateCheck = other.ForceClientUpdateCheck
		dirty = true
	}

	if !m.CreatedAt.Equal(other.CreatedAt) {
		m.CreatedAt = other.CreatedAt
		dirty = true
	}

	if !m.UpdatedAt.Equal(other.UpdatedAt) {
		m.UpdatedAt = other.UpdatedAt
		dirty = true
	}

	if !nssql.NullTimeEqual(m.DeletedAt, other.DeletedAt) {
		m.DeletedAt = other.DeletedAt
		dirty = true
	}

	return
}

// AssignPartial assigns fields with non-zero values from "other" into the receiver.
// It returns true if any changes were made to the receiver.
func (m *SteamLogin) AssignPartial(other *SteamLogin) (dirty bool) {
	if other == nil {
		return false
	}

	if other.ID != 0 && m.ID != other.ID {
		m.ID = other.ID
		dirty = true
	}

	if other.Username != "" && m.Username != other.Username {
		m.Username = other.Username
		dirty = true
	}

	if other.SteamID != 0 && m.SteamID != other.SteamID {
		m.SteamID = other.SteamID
		dirty = true
	}

	if other.AccountFlags != 0 && m.AccountFlags != other.AccountFlags {
		m.AccountFlags = other.AccountFlags
		dirty = true
	}

	if other.MachineHash != nil && !bytes.Equal(m.MachineHash, other.MachineHash) {
		m.MachineHash = other.MachineHash
		dirty = true
	}

	if other.UniqueID != 0 && m.UniqueID != other.UniqueID {
		m.UniqueID = other.UniqueID
		dirty = true
	}

	if other.LoginKey != "" && m.LoginKey != other.LoginKey {
		m.LoginKey = other.LoginKey
		dirty = true
	}

	if other.WebAuthNonce != "" && m.WebAuthNonce != other.WebAuthNonce {
		m.WebAuthNonce = other.WebAuthNonce
		dirty = true
	}

	if other.WebSessionID != "" && m.WebSessionID != other.WebSessionID {
		m.WebSessionID = other.WebSessionID
		dirty = true
	}

	if other.WebAuthToken != "" && m.WebAuthToken != other.WebAuthToken {
		m.WebAuthToken = other.WebAuthToken
		dirty = true
	}

	if other.WebAuthTokenSecure != "" && m.WebAuthTokenSecure != other.WebAuthTokenSecure {
		m.WebAuthTokenSecure = other.WebAuthTokenSecure
		dirty = true
	}

	if !nssql.NullTimeIsZero(other.SuspendedUntil) && !nssql.NullTimeEqual(m.SuspendedUntil, other.SuspendedUntil) {
		m.SuspendedUntil = other.SuspendedUntil
		dirty = true
	}

	if other.GameVersion != 0 && m.GameVersion != other.GameVersion {
		m.GameVersion = other.GameVersion
		dirty = true
	}

	if other.LocationCountry != "" && m.LocationCountry != other.LocationCountry {
		m.LocationCountry = other.LocationCountry
		dirty = true
	}

	if other.LocationLatitude != 0 && m.LocationLatitude != other.LocationLatitude {
		m.LocationLatitude = other.LocationLatitude
		dirty = true
	}

	if other.LocationLongitude != 0 && m.LocationLongitude != other.LocationLongitude {
		m.LocationLongitude = other.LocationLongitude
		dirty = true
	}

	if other.CellID != 0 && m.CellID != other.CellID {
		m.CellID = other.CellID
		dirty = true
	}

	if other.CellIDPingThreshold != 0 && m.CellIDPingThreshold != other.CellIDPingThreshold {
		m.CellIDPingThreshold = other.CellIDPingThreshold
		dirty = true
	}

	if other.EmailDomain != "" && m.EmailDomain != other.EmailDomain {
		m.EmailDomain = other.EmailDomain
		dirty = true
	}

	if other.VanityURL != "" && m.VanityURL != other.VanityURL {
		m.VanityURL = other.VanityURL
		dirty = true
	}

	if other.OutOfGameHeartbeatSeconds != 0 && m.OutOfGameHeartbeatSeconds != other.OutOfGameHeartbeatSeconds {
		m.OutOfGameHeartbeatSeconds = other.OutOfGameHeartbeatSeconds
		dirty = true
	}

	if other.InGameHeartbeatSeconds != 0 && m.InGameHeartbeatSeconds != other.InGameHeartbeatSeconds {
		m.InGameHeartbeatSeconds = other.InGameHeartbeatSeconds
		dirty = true
	}

	if other.PublicIP != 0 && m.PublicIP != other.PublicIP {
		m.PublicIP = other.PublicIP
		dirty = true
	}

	if other.ServerTime != 0 && m.ServerTime != other.ServerTime {
		m.ServerTime = other.ServerTime
		dirty = true
	}

	if other.SteamTicket != nil && !bytes.Equal(m.SteamTicket, other.SteamTicket) {
		m.SteamTicket = other.SteamTicket
		dirty = true
	}

	if other.UsePics && m.UsePics != other.UsePics {
		m.UsePics = other.UsePics
		dirty = true
	}

	if other.CountryCode != "" && m.CountryCode != other.CountryCode {
		m.CountryCode = other.CountryCode
		dirty = true
	}

	if other.ParentalSettings != nil && !bytes.Equal(m.ParentalSettings, other.ParentalSettings) {
		m.ParentalSettings = other.ParentalSettings
		dirty = true
	}

	if other.ParentalSettingSignature != nil && !bytes.Equal(m.ParentalSettingSignature, other.ParentalSettingSignature) {
		m.ParentalSettingSignature = other.ParentalSettingSignature
		dirty = true
	}

	if other.LoginFailuresToMigrate != 0 && m.LoginFailuresToMigrate != other.LoginFailuresToMigrate {
		m.LoginFailuresToMigrate = other.LoginFailuresToMigrate
		dirty = true
	}

	if other.DisconnectsToMigrate != 0 && m.DisconnectsToMigrate != other.DisconnectsToMigrate {
		m.DisconnectsToMigrate = other.DisconnectsToMigrate
		dirty = true
	}

	if other.OgsDataReportTimeWindow != 0 && m.OgsDataReportTimeWindow != other.OgsDataReportTimeWindow {
		m.OgsDataReportTimeWindow = other.OgsDataReportTimeWindow
		dirty = true
	}

	if other.ClientInstanceID != 0 && m.ClientInstanceID != other.ClientInstanceID {
		m.ClientInstanceID = other.ClientInstanceID
		dirty = true
	}

	if other.ForceClientUpdateCheck && m.ForceClientUpdateCheck != other.ForceClientUpdateCheck {
		m.ForceClientUpdateCheck = other.ForceClientUpdateCheck
		dirty = true
	}

	if !other.CreatedAt.IsZero() && !m.CreatedAt.Equal(other.CreatedAt) {
		m.CreatedAt = other.CreatedAt
		dirty = true
	}

	if !other.UpdatedAt.IsZero() && !m.UpdatedAt.Equal(other.UpdatedAt) {
		m.UpdatedAt = other.UpdatedAt
		dirty = true
	}

	if !nssql.NullTimeIsZero(other.DeletedAt) && !nssql.NullTimeEqual(m.DeletedAt, other.DeletedAt) {
		m.DeletedAt = other.DeletedAt
		dirty = true
	}

	return
}
