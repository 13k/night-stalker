// Code generated by modelgen. DO NOT EDIT.

package models

var _ Record = (*ProPlayer)(nil)

var ProPlayerModel Model = (*modelProPlayer)(nil)

// uses an anonymous struct to have compile-time checks when using associations
var assocProPlayer = struct {
	Team Association
}{
	Team: NewAssociation(
		BelongsTo,
		&ModelAssociation{Model: ProPlayerModel, Name: "Team", PK: "id", FK: "team_id"},
		&ModelAssociation{Model: TeamModel, Name: "ProPlayer", PK: "id", FK: ""},
	),
}

type modelProPlayer struct{}

func (*modelProPlayer) Name() string             { return "ProPlayer" }
func (*modelProPlayer) Table() Table             { return ProPlayerTable }
func (*modelProPlayer) NewRecord() Record        { return &ProPlayer{} }
func (*modelProPlayer) NewSlicePtr() interface{} { return &[]*ProPlayer{} }

func (*modelProPlayer) AsRecordSlice(v interface{}) ([]Record, error) {
	sptr, ok := v.(*[]*ProPlayer)

	if !ok {
		return nil, &ErrInvalidSliceType{Model: ProPlayerModel, Value: v}
	}

	if sptr == nil || *sptr == nil {
		return nil, nil
	}

	rs := make([]Record, len(*sptr))

	for i, r := range *sptr {
		rs[i] = r
	}

	return rs, nil
}

func (*modelProPlayer) Associations() []Association {
	return []Association{
		assocProPlayer.Team,
	}
}

func (*modelProPlayer) Association(name string) (Association, error) {
	switch name {
	case "Team":
		return assocProPlayer.Team, nil
	}

	return nil, &ErrNotAssociated{Model: ProPlayerModel, Assoc: name}
}

func (*ProPlayer) Model() Model {
	return ProPlayerModel
}

func (m *ProPlayer) AssignRecord(record Record) (bool, error) {
	if other, ok := record.(*ProPlayer); ok {
		return m.Assign(other), nil
	}

	return false, &ErrInvalidRecord{Model: m.Model(), Record: record}
}

func (m *ProPlayer) AssignPartialRecord(record Record) (bool, error) {
	if other, ok := record.(*ProPlayer); ok {
		return m.AssignPartial(other), nil
	}

	return false, &ErrInvalidRecord{Model: ProPlayerModel, Record: record}
}

func (m *ProPlayer) GetAssocPK(assoc string) (ID, error) {
	return m.ID, nil
}

func (m *ProPlayer) GetAssocFK(assoc string) (ID, error) {
	switch assoc {
	case "Team":
		return m.TeamID, nil
	}

	return 0, &ErrNotAssociated{Model: ProPlayerModel, Assoc: assoc}
}

func (m *ProPlayer) SetAssociated(assoc string, records ...Record) error {
	if len(records) == 0 {
		return nil
	}

	switch assoc {
	case "Team":
		r := records[0]

		if mr, ok := r.(*Team); ok {
			m.Team = mr
			return nil
		}

		return &ErrInvalidAssociationRecord{Assoc: assocProPlayer.Team, Record: r}
	}

	return &ErrNotAssociated{Model: ProPlayerModel, Assoc: assoc}
}
