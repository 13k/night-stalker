// Code generated by modelgen. DO NOT EDIT.

package models

var _ Record = (*LiveMatch)(nil)

var LiveMatchModel Model = (*modelLiveMatch)(nil)

// uses an anonymous struct to have compile-time checks when using associations
var assocLiveMatch = struct {
	Match       Association
	League      Association
	RadiantTeam Association
	DireTeam    Association
	Players     Association
	Stats       Association
}{
	Match: NewAssociation(
		BelongsTo,
		&ModelAssociation{Model: LiveMatchModel, Name: "Match", PK: "id", FK: "match_id"},
		&ModelAssociation{Model: MatchModel, Name: "LiveMatch", PK: "id", FK: ""},
	),
	League: NewAssociation(
		BelongsTo,
		&ModelAssociation{Model: LiveMatchModel, Name: "League", PK: "id", FK: "league_id"},
		&ModelAssociation{Model: LeagueModel, Name: "LiveMatch", PK: "id", FK: ""},
	),
	RadiantTeam: NewAssociation(
		BelongsTo,
		&ModelAssociation{Model: LiveMatchModel, Name: "RadiantTeam", PK: "id", FK: "radiant_team_id"},
		&ModelAssociation{Model: TeamModel, Name: "LiveMatch", PK: "id", FK: ""},
	),
	DireTeam: NewAssociation(
		BelongsTo,
		&ModelAssociation{Model: LiveMatchModel, Name: "DireTeam", PK: "id", FK: "dire_team_id"},
		&ModelAssociation{Model: TeamModel, Name: "LiveMatch", PK: "id", FK: ""},
	),
	Players: NewAssociation(
		HasMany,
		&ModelAssociation{Model: LiveMatchModel, Name: "Players", PK: "id", FK: ""},
		&ModelAssociation{Model: LiveMatchPlayerModel, Name: "LiveMatch", PK: "id", FK: "live_match_id"},
	),
	Stats: NewAssociation(
		HasMany,
		&ModelAssociation{Model: LiveMatchModel, Name: "Stats", PK: "id", FK: ""},
		&ModelAssociation{Model: LiveMatchStatsModel, Name: "LiveMatch", PK: "id", FK: "live_match_id"},
	),
}

type modelLiveMatch struct{}

func (*modelLiveMatch) Name() string             { return "LiveMatch" }
func (*modelLiveMatch) Table() Table             { return LiveMatchTable }
func (*modelLiveMatch) NewRecord() Record        { return &LiveMatch{} }
func (*modelLiveMatch) NewSlicePtr() interface{} { return &[]*LiveMatch{} }

func (*modelLiveMatch) AsRecordSlice(v interface{}) ([]Record, error) {
	sptr, ok := v.(*[]*LiveMatch)

	if !ok {
		return nil, &ErrInvalidSliceType{Model: LiveMatchModel, Value: v}
	}

	if sptr == nil || *sptr == nil {
		return nil, nil
	}

	rs := make([]Record, len(*sptr))

	for i, r := range *sptr {
		rs[i] = r
	}

	return rs, nil
}

func (*modelLiveMatch) Associations() []Association {
	return []Association{
		assocLiveMatch.Match,
		assocLiveMatch.League,
		assocLiveMatch.RadiantTeam,
		assocLiveMatch.DireTeam,
		assocLiveMatch.Players,
		assocLiveMatch.Stats,
	}
}

func (*modelLiveMatch) Association(name string) (Association, error) {
	switch name {
	case "Match":
		return assocLiveMatch.Match, nil
	case "League":
		return assocLiveMatch.League, nil
	case "RadiantTeam":
		return assocLiveMatch.RadiantTeam, nil
	case "DireTeam":
		return assocLiveMatch.DireTeam, nil
	case "Players":
		return assocLiveMatch.Players, nil
	case "Stats":
		return assocLiveMatch.Stats, nil
	}

	return nil, &ErrNotAssociated{Model: LiveMatchModel, Assoc: name}
}

func (*LiveMatch) Model() Model {
	return LiveMatchModel
}

func (m *LiveMatch) AssignRecord(record Record) (bool, error) {
	if other, ok := record.(*LiveMatch); ok {
		return m.Assign(other), nil
	}

	return false, &ErrInvalidRecord{Model: m.Model(), Record: record}
}

func (m *LiveMatch) AssignPartialRecord(record Record) (bool, error) {
	if other, ok := record.(*LiveMatch); ok {
		return m.AssignPartial(other), nil
	}

	return false, &ErrInvalidRecord{Model: LiveMatchModel, Record: record}
}

func (m *LiveMatch) GetAssocPK(assoc string) (ID, error) {
	switch assoc {
	case "Players":
		return m.ID, nil
	case "Stats":
		return m.ID, nil
	}

	return m.ID, nil
}

func (m *LiveMatch) GetAssocFK(assoc string) (ID, error) {
	switch assoc {
	case "Match":
		return m.MatchID, nil
	case "League":
		return m.LeagueID, nil
	case "RadiantTeam":
		return m.RadiantTeamID, nil
	case "DireTeam":
		return m.DireTeamID, nil
	}

	return 0, &ErrNotAssociated{Model: LiveMatchModel, Assoc: assoc}
}

func (m *LiveMatch) SetAssociated(assoc string, records ...Record) error {
	if len(records) == 0 {
		return nil
	}

	switch assoc {
	case "Match":
		r := records[0]

		if mr, ok := r.(*Match); ok {
			m.Match = mr
			return nil
		}

		return &ErrInvalidAssociationRecord{Assoc: assocLiveMatch.Match, Record: r}
	case "League":
		r := records[0]

		if mr, ok := r.(*League); ok {
			m.League = mr
			return nil
		}

		return &ErrInvalidAssociationRecord{Assoc: assocLiveMatch.League, Record: r}
	case "RadiantTeam":
		r := records[0]

		if mr, ok := r.(*Team); ok {
			m.RadiantTeam = mr
			return nil
		}

		return &ErrInvalidAssociationRecord{Assoc: assocLiveMatch.RadiantTeam, Record: r}
	case "DireTeam":
		r := records[0]

		if mr, ok := r.(*Team); ok {
			m.DireTeam = mr
			return nil
		}

		return &ErrInvalidAssociationRecord{Assoc: assocLiveMatch.DireTeam, Record: r}
	case "Players":
		mrs := make([]*LiveMatchPlayer, len(records))

		for i, r := range records {
			mr, ok := r.(*LiveMatchPlayer)

			if !ok {
				return &ErrInvalidAssociationRecord{Assoc: assocLiveMatch.Players, Record: r}
			}

			mrs[i] = mr
		}

		m.Players = mrs
		return nil
	case "Stats":
		mrs := make([]*LiveMatchStats, len(records))

		for i, r := range records {
			mr, ok := r.(*LiveMatchStats)

			if !ok {
				return &ErrInvalidAssociationRecord{Assoc: assocLiveMatch.Stats, Record: r}
			}

			mrs[i] = mr
		}

		m.Stats = mrs
		return nil
	}

	return &ErrNotAssociated{Model: LiveMatchModel, Assoc: assoc}
}
